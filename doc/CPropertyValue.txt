
*CPropertyValue*  
================

 CPropertyValue is a helper class that provides static methods to convert
 component property values to specific types.

 CPropertyValue is commonly used in component setter methods to ensure the new
 property value is of the specific type. For example, a boolean-typed property
 setter method would be as follows,
>
 public function setPropertyName($value)
 {
     $value=CPropertyValue::ensureBoolean($value);
     // $value is now of boolean type
 }
<
 Properties can be of the following types with specific type conversion rules:
   {string} a boolean value will be converted to 'true' or 'false'.
   {boolean} string 'true' (case-insensitive) will be converted to
   true,            string 'false' (case-insensitive) will be
   converted to false.
   integer
   float
   {array} string starting with '(' and ending with ')' will be
   considered as          as an array expression and will be
   evaluated. Otherwise, an array          with the value to be
   ensured is returned.
   object
   {enum} enumerable type, represented by an array of strings.



METHOD DETAILS
------------------------------------------------------------------------------

*CPropertyValue::ensureArray*					 public
>
 ensureArray($value)
<
(array) 

 Converts a value to array type. If the value is a string and it is in the
 form (a,b,c) then an array consisting of each of the elements will be
 returned. If the value is a string and it is not in this form then an array
 consisting of just the string will be returned. If the value is not a string
 then
    [value] (mixed) the value to be converted.


*CPropertyValue::ensureBoolean* 				 public
>
 ensureBoolean($value)
<
(boolean) 

 Converts a value to boolean type. Note, string 'true' (case-insensitive) will
 be converted to true, string 'false' (case-insensitive) will be converted to
 false. If a string represents a non-zero number, it will be treated as true.
    [value] (mixed) the value to be converted.


*CPropertyValue::ensureEnum*					 public
>
 ensureEnum($value, $enumType)
<
(string) the valid enumeration value

 Converts a value to enum type.

 This method checks if the value is of the specified enumerable type. A value
 is a valid enumerable value if it is equal to the name of a constant in the
 specified enumerable type (class). For more details about enumerable, see
 |CEnumerable|.
    [value] (string) the enumerable value to be checked.
    [enumType] (string) the enumerable class name (make sure it is included
    before calling this function).


*CPropertyValue::ensureFloat*					 public
>
 ensureFloat($value)
<
(float) 

 Converts a value to float type.
    [value] (mixed) the value to be converted.


*CPropertyValue::ensureInteger* 				 public
>
 ensureInteger($value)
<
(integer) 

 Converts a value to integer type.
    [value] (mixed) the value to be converted.


*CPropertyValue::ensureObject*					 public
>
 ensureObject($value)
<
(object) 

 Converts a value to object type.
    [value] (mixed) the value to be converted.


*CPropertyValue::ensureString*					 public
>
 ensureString($value)
<
(string) 

 Converts a value to string type. Note, a boolean value will be converted to
 'true' if it is true and 'false' if it is false.
    [value] (mixed) the value to be converted.



 vim:tw=78:ts=8:ft=help:norl:


*CDbConnection*   >> |CApplicationComponent| >> |CComponent|
===============

 CDbConnection represents a connection to a database.

 CDbConnection works together with |CDbCommand|, |CDbDataReader| and
 |CDbTransaction| to provide data access to various DBMS in a common set of
 APIs. They are a thin wrapper of the 'PDO' PHP extension.

 To establish a connection, set |CDbConnection::setActive| to true after
 specifying |CDbConnection::connectionString|, |CDbConnection::username| and
 |CDbConnection::password|.

 The following example shows how to create a CDbConnection instance and
 establish the actual connection:
>
 $connection=new CDbConnection($dsn,$username,$password);
 $connection->active=true;
<
 After the DB connection is established, one can execute an SQL statement like
 the following:
>
 $command=$connection->createCommand($sqlStatement);
 $command->execute();   // a non-query SQL statement execution
 // or execute an SQL query and fetch the result set
 $reader=$command->query();

 // each $row is an array representing a row of data
 foreach($reader as $row) ...
<
 One can do prepared SQL execution and bind parameters to the prepared SQL:
>
 $command=$connection->createCommand($sqlStatement);
 $command->bindParam($name1,$value1);
 $command->bindParam($name2,$value2);
 $command->execute();
<
 To use transaction, do like the following:
>
 $transaction=$connection->beginTransaction();
 try
 {
    $connection->createCommand($sql1)->execute();
    $connection->createCommand($sql2)->execute();
    //.... other SQL executions
    $transaction->commit();
 }
 catch(Exception $e)
 {
    $transaction->rollBack();
 }
<
 CDbConnection also provides a set of methods to support setting and querying
 of certain DBMS attributes, such as |CDbConnection::getNullConversion|.

 Since CDbConnection implements the interface IApplicationComponent, it can be
 used as an application component and be configured in application
 configuration, like the following,
>
 array(
     'components'=>array(
         'db'=>array(
             'class'=>'CDbConnection',
             'connectionString'=>'sqlite:path/to/dbfile',
         ),
     ),
 )
<


PROPERTY DETAILS
------------------------------------------------------------------------------

<active>				*CDbConnection::active*
 (boolean) Returns whether the DB connection is established.

<attributes>				*CDbConnection::attributes*
 (array) Returns the attributes that are previously explicitly set for the DB
 connection.

<autoCommit>				*CDbConnection::autoCommit*
 (boolean) Returns whether creating or updating a DB record will be
 automatically committed. Some DBMS (such as sqlite) may not support this
 feature.

<autoConnect>				*CDbConnection::autoConnect*
 (boolean) whether the database connection should be automatically established
 the component is being initialized. Defaults to true. Note, this property is
 only effective when the CDbConnection object is used as an application
 component.

<charset>				*CDbConnection::charset*
 (string) the charset used for database connection. The property is only used
 for MySQL and PostgreSQL databases. Defaults to null, meaning using default
 charset as specified by the database.

 Note that if you're using GBK or BIG5 then it's highly recommended to update
 to PHP 5.3.6+ and to specify charset via DSN like
 'mysql:dbname=mydatabase;host=127.0.0.1;charset=GBK;'.

<clientVersion> 			*CDbConnection::clientVersion*
 (string) Returns the version information of the DB driver.

<columnCase>				*CDbConnection::columnCase*
 (mixed) Returns the case of the column names

<commandBuilder>			*CDbConnection::commandBuilder*
 (CDbCommandBuilder) Returns the SQL command builder for the current DB
 connection.

<connectionStatus>			*CDbConnection::connectionStatus*
 (string) Returns the status of the connection. Some DBMS (such as sqlite) may
 not support this feature.

<connectionString>			*CDbConnection::connectionString*
 (string) The Data Source Name, or DSN, contains the information required to
 connect to the database.

<currentTransaction>			*CDbConnection::currentTransaction*
 (CDbTransaction) Returns the currently active transaction.

<driverMap>				*CDbConnection::driverMap*
 (array) mapping between PDO driver and schema class name. A schema class can
 be specified using path alias.

<driverName>				*CDbConnection::driverName*
 (string) Returns the name of the DB driver

<emulatePrepare>			*CDbConnection::emulatePrepare*
 (boolean) whether to turn on prepare emulation. Defaults to false, meaning
 PDO will use the native prepare support if available. For some databases
 (such as MySQL), this may need to be set true so that PDO can emulate the
 prepare support to bypass the buggy native prepare support. Note, this
 property is only effective for PHP 5.1.3 or above. The default value is null,
 which will not change the ATTR_EMULATE_PREPARES value of PDO.

<enableParamLogging>			*CDbConnection::enableParamLogging*
 (boolean) whether to log the values that are bound to a prepare SQL
 statement. Defaults to false. During development, you may consider setting
 this property to true so that parameter values bound to SQL statements are
 logged for debugging purpose. You should be aware that logging parameter
 values could be expensive and have significant impact on the performance of
 your application.

<enableProfiling>			*CDbConnection::enableProfiling*
 (boolean) whether to enable profiling the SQL statements being executed.
 Defaults to false. This should be mainly enabled and used during development
 to find out the bottleneck of SQL executions.

<initSQLs>				*CDbConnection::initSQLs*
 (array) list of SQL statements that should be executed right after the DB
 connection is established.

<lastInsertID>				*CDbConnection::lastInsertID*
 (string) Returns the ID of the last inserted row or sequence value.

<nullConversion>			*CDbConnection::nullConversion*
 (mixed) Returns how the null and empty strings are converted.

<password>				*CDbConnection::password*
 (string) the password for establishing DB connection. Defaults to empty
 string.

<pdoClass>				*CDbConnection::pdoClass*
 (string) Custom PDO wrapper class.

<pdoInstance>				*CDbConnection::pdoInstance*
 (PDO) Returns the PDO instance.

<persistent>				*CDbConnection::persistent*
 (boolean) Returns whether the connection is persistent or not. Some DBMS
 (such as sqlite) may not support this feature.

<prefetch>				*CDbConnection::prefetch*
 (boolean) Returns whether the connection performs data prefetching.

<queryCacheID>				*CDbConnection::queryCacheID*
 (string) the ID of the cache application component that is used for query
 caching. Defaults to 'cache' which refers to the primary cache application
 component. Set this property to false if you want to disable query caching.

<queryCachingCount>			*CDbConnection::queryCachingCount*
 (integer) the number of SQL statements that need to be cached next. If this
 is 0, then even if query caching is enabled, no query will be cached. Note
 that each time after executing a SQL statement (whether executed on DB server
 or fetched from query cache), this property will be reduced by 1 until 0.

<queryCachingDependency>		*CDbConnection::queryCachingDependency*
 (CCacheDependency) the dependency that will be used when saving query results
 into cache.

<queryCachingDuration>			*CDbConnection::queryCachingDuration*
 (integer) number of seconds that query results can remain valid in cache. Use
 0 or negative value to indicate not caching query results (the default
 behavior).

 In order to enable query caching, this property must be a positive integer
 and |CDbConnection::queryCacheID| must point to a valid cache component ID.

 The method |CDbConnection::cache| is provided as a convenient way of setting
 this property and |CDbConnection::queryCachingDependency| on the fly.

<schema>				*CDbConnection::schema*
 (CDbSchema) Returns the database schema for the current connection

<schemaCacheID> 			*CDbConnection::schemaCacheID*
 (string) the ID of the cache application component that is used to cache the
 table metadata. Defaults to 'cache' which refers to the primary cache
 application component. Set this property to false if you want to disable
 caching table metadata.

<schemaCachingDuration> 		*CDbConnection::schemaCachingDuration*
 (integer) number of seconds that table metadata can remain valid in cache.
 Use 0 or negative value to indicate not caching schema. If greater than 0 and
 the primary cache is enabled, the table metadata will be cached.

<schemaCachingExclude>			*CDbConnection::schemaCachingExclude*
 (array) list of tables whose metadata should NOT be cached. Defaults to empty
 array.

<serverInfo>				*CDbConnection::serverInfo*
 (string) Returns the information of DBMS server.

<serverVersion> 			*CDbConnection::serverVersion*
 (string) Returns the version information of DBMS server.

<stats> 				*CDbConnection::stats*
 (array) Returns the statistical results of SQL executions. The results
 returned include the number of SQL statements executed and the total time
 spent. In order to use this method, |CDbConnection::enableProfiling| has to
 be set true.

<tablePrefix>				*CDbConnection::tablePrefix*
 (string) the default prefix for table names. Defaults to null, meaning no
 table prefix. By setting this property, any token like '|tableName}}' in
 {{CDbCommand::text| will be replaced by 'prefixTableName', where 'prefix'
 refers to this property value.

<timeout>				*CDbConnection::timeout*
 (integer) Returns the timeout settings for the connection.

<username>				*CDbConnection::username*
 (string) the username for establishing DB connection. Defaults to empty
 string.



METHOD DETAILS
------------------------------------------------------------------------------

*CDbConnection::__construct*					 public
>
 __construct($dsn='', $username='', $password='')
<
(void)

 Constructor. Note, the DB connection is not established when this connection
 instance is created. Set |CDbConnection::setActive| property to true to
 establish the connection.
    [dsn] (string) The Data Source Name, or DSN, contains the information
    required to connect to the database.
    [username] (string) The user name for the DSN string.
    [password] (string) The password for the DSN string.


*CDbConnection::__sleep*					 public
>
 __sleep()
<
(array) 

 Close the connection when serializing.


*CDbConnection::beginTransaction*				 public
>
 beginTransaction()
<
(CDbTransaction) the transaction initiated

 Starts a transaction.


*CDbConnection::cache*						 public
>
 cache($duration, $dependency=NULL, $queryCount=1)
<
(CDbConnection) the connection instance itself.

 Sets the parameters about query caching. This method can be used to enable or
 disable query caching. By setting the $duration parameter to be 0, the query
 caching will be disabled. Otherwise, query results of the new SQL statements
 executed next will be saved in cache and remain valid for the specified
 duration. If the same query is executed again, the result may be fetched from
 cache directly without actually executing the SQL statement.
    [duration] (integer) the number of seconds that query results may remain
    valid in cache. If this is 0, the caching will be disabled.
    [dependency] (CCacheDependency) the dependency that will be used when
    saving the query results into cache.
    [queryCount] (integer) number of SQL queries that need to be cached after
    calling this method. Defaults to 1, meaning that the next SQL query will
    be cached.


*CDbConnection::close*						 protected
>
 close()
<
(void)

 Closes the currently active DB connection. It does nothing if the connection
 is already closed.


*CDbConnection::createCommand*					 public
>
 createCommand($query=NULL)
<
(CDbCommand) the DB command

 Creates a command for execution.
    [query] (mixed) the DB query to be executed. This can be either a string
    representing a SQL statement, or an array representing different fragments
    of a SQL statement. Please refer to |CDbCommand::__construct| for more
    details about how to pass an array as the query. If this parameter is not
    given, you will have to call query builder methods of |CDbCommand| to
    build the DB query.


*CDbConnection::createPdoInstance*				 protected
>
 createPdoInstance()
<
(PDO) the pdo instance

 Creates the PDO instance. When some functionalities are missing in the pdo
 driver, we may use an adapter class to provides them.


*CDbConnection::getActive*					 public
>
 getActive()
<
(boolean) whether the DB connection is established

 Returns whether the DB connection is established.


*CDbConnection::getAttribute*					 public
>
 getAttribute($name)
<
(mixed) the corresponding attribute information

 Obtains a specific DB connection attribute information.
    [name] (integer) the attribute to be queried


*CDbConnection::getAttributes*					 public
>
 getAttributes()
<
(array) attributes (name=>value) that are previously explicitly set for the DB
connection.

 Returns the attributes that are previously explicitly set for the DB
 connection.


*CDbConnection::getAutoCommit*					 public
>
 getAutoCommit()
<
(boolean) whether creating or updating a DB record will be automatically
committed.

 Returns whether creating or updating a DB record will be automatically
 committed. Some DBMS (such as sqlite) may not support this feature.


*CDbConnection::getAvailableDrivers*				 public
>
 getAvailableDrivers()
<
(array) list of available PDO drivers

 Returns a list of available PDO drivers.


*CDbConnection::getClientVersion*				 public
>
 getClientVersion()
<
(string) the version information of the DB driver

 Returns the version information of the DB driver.


*CDbConnection::getColumnCase*					 public
>
 getColumnCase()
<
(mixed) the case of the column names

 Returns the case of the column names


*CDbConnection::getCommandBuilder*				 public
>
 getCommandBuilder()
<
(CDbCommandBuilder) the command builder

 Returns the SQL command builder for the current DB connection.


*CDbConnection::getConnectionStatus*				 public
>
 getConnectionStatus()
<
(string) the status of the connection

 Returns the status of the connection. Some DBMS (such as sqlite) may not
 support this feature.


*CDbConnection::getCurrentTransaction*				 public
>
 getCurrentTransaction()
<
(CDbTransaction) the currently active transaction. Null if no active
transaction.

 Returns the currently active transaction.


*CDbConnection::getDriverName*					 public
>
 getDriverName()
<
(string) name of the DB driver

 Returns the name of the DB driver


*CDbConnection::getLastInsertID*				 public
>
 getLastInsertID($sequenceName='')
<
(string) the row ID of the last row inserted, or the last value retrieved from
the sequence object

 Returns the ID of the last inserted row or sequence value.
    [sequenceName] (string) name of the sequence object (required by some
    DBMS)


*CDbConnection::getNullConversion*				 public
>
 getNullConversion()
<
(mixed) how the null and empty strings are converted

 Returns how the null and empty strings are converted.


*CDbConnection::getPdoInstance* 				 public
>
 getPdoInstance()
<
(PDO) the PDO instance, null if the connection is not established yet

 Returns the PDO instance.


*CDbConnection::getPdoType*					 public
>
 getPdoType($type)
<
(integer) the corresponding PDO type

 Determines the PDO type for the specified PHP type.
    [type] (string) The PHP type (obtained by gettype() call).


*CDbConnection::getPersistent*					 public
>
 getPersistent()
<
(boolean) whether the connection is persistent or not

 Returns whether the connection is persistent or not. Some DBMS (such as
 sqlite) may not support this feature.


*CDbConnection::getPrefetch*					 public
>
 getPrefetch()
<
(boolean) whether the connection performs data prefetching

 Returns whether the connection performs data prefetching.


*CDbConnection::getSchema*					 public
>
 getSchema()
<
(CDbSchema) the database schema for the current connection

 Returns the database schema for the current connection


*CDbConnection::getServerInfo*					 public
>
 getServerInfo()
<
(string) the information of DBMS server

 Returns the information of DBMS server.


*CDbConnection::getServerVersion*				 public
>
 getServerVersion()
<
(string) the version information of DBMS server

 Returns the version information of DBMS server.


*CDbConnection::getStats*					 public
>
 getStats()
<
(array) the first element indicates the number of SQL statements executed, and
the second element the total time spent in SQL execution.

 Returns the statistical results of SQL executions. The results returned
 include the number of SQL statements executed and the total time spent. In
 order to use this method, |CDbConnection::enableProfiling| has to be set
 true.


*CDbConnection::getTimeout*					 public
>
 getTimeout()
<
(integer) timeout settings for the connection

 Returns the timeout settings for the connection.


*CDbConnection::init*						 public
>
 init()
<
(void)

 Initializes the component. This method is required by |IApplicationComponent|
 and is invoked by application when the CDbConnection is used as an
 application component. If you override this method, make sure to call the
 parent implementation so that the component can be marked as initialized.


*CDbConnection::initConnection* 				 protected
>
 initConnection($pdo)
<
(void)

 Initializes the open db connection. This method is invoked right after the db
 connection is established. The default implementation is to set the charset
 for MySQL and PostgreSQL database connections.
    [pdo] (PDO) the PDO instance


*CDbConnection::open*						 protected
>
 open()
<
(void)

 Opens DB connection if it is currently not


*CDbConnection::quoteColumnName*				 public
>
 quoteColumnName($name)
<
(string) the properly quoted column name

 Quotes a column name for use in a query. If the column name contains prefix,
 the prefix will also be properly quoted.
    [name] (string) column name


*CDbConnection::quoteTableName* 				 public
>
 quoteTableName($name)
<
(string) the properly quoted table name

 Quotes a table name for use in a query. If the table name contains schema
 prefix, the prefix will also be properly quoted.
    [name] (string) table name


*CDbConnection::quoteValue*					 public
>
 quoteValue($str)
<
(string) the properly quoted string

 Quotes a string value for use in a query.
    [str] (string) string to be quoted


*CDbConnection::setActive*					 public
>
 setActive($value)
<
(void)

 Open or close the DB connection.
    [value] (boolean) whether to open or close DB connection


*CDbConnection::setAttribute*					 public
>
 setAttribute($name, $value)
<
(void)

 Sets an attribute on the database connection.
    [name] (integer) the attribute to be set
    [value] (mixed) the attribute value


*CDbConnection::setAttributes*					 public
>
 setAttributes($values)
<
(void)

 Sets a set of attributes on the database connection.
    [values] (array) attributes (name=>value) to be set.


*CDbConnection::setAutoCommit*					 public
>
 setAutoCommit($value)
<
(void)

 Sets whether creating or updating a DB record will be automatically
 committed. Some DBMS (such as sqlite) may not support this feature.
    [value] (boolean) whether creating or updating a DB record will be
    automatically committed.


*CDbConnection::setColumnCase*					 public
>
 setColumnCase($value)
<
(void)

 Sets the case of the column names.
    [value] (mixed) the case of the column names


*CDbConnection::setNullConversion*				 public
>
 setNullConversion($value)
<
(void)

 Sets how the null and empty strings are converted.
    [value] (mixed) how the null and empty strings are converted


*CDbConnection::setPersistent*					 public
>
 setPersistent($value)
<
(void)

 Sets whether the connection is persistent or not. Some DBMS (such as sqlite)
 may not support this feature.
    [value] (boolean) whether the connection is persistent or not



 vim:tw=78:ts=8:ft=help:norl:


*CForm*   >> |CFormElement| >> |CComponent|
=======

 CForm represents a form object that contains form input specifications.

 The main purpose of introducing the abstraction of form objects is to enhance
 the reusability of forms. In particular, we can divide a form in two parts:
 those that specify each individual form inputs, and those that decorate the
 form inputs. A CForm object represents the former part. It relies on the
 rendering process to accomplish form input decoration. Reusability is mainly
 achieved in the rendering process. That is, a rendering process can be reused
 to render different CForm objects.

 A form can be rendered in different ways. One can call the |CForm::render|
 method to get a quick form rendering without writing any HTML code; one can
 also override |CForm::render| to render the form in a different layout; and
 one can use an external view template to render each form element explicitly.
 In these ways, the |CForm::render| method can be applied to all kinds of
 forms and thus achieves maximum reusability; while the external view template
 keeps maximum flexibility in rendering complex forms.

 Form input specifications are organized in terms of a form element hierarchy.
 At the root of the hierarchy, it is the root CForm object. The root form
 object maintains its children in two collections: |CForm::elements| and
 |CForm::buttons|. The former contains non-button form elements
 (|CFormStringElement|, |CFormInputElement| and CForm); while the latter
 mainly contains button elements (|CFormButtonElement|). When a CForm object
 is embedded in the |CForm::elements| collection, it is called a sub-form
 which can have its own |CForm::elements| and |CForm::buttons| collections and
 thus form the whole form hierarchy.

 Sub-forms are mainly used to handle multiple models. For example, in a user
 registration form, we can have the root form to collect input for the user
 table while a sub-form to collect input for the profile table. Sub-form is
 also a good way to partition a lengthy form into shorter ones, even though
 all inputs may belong to the same model.

 Form input specifications are given in terms of a configuration array which
 is used to initialize the property values of a CForm object. The
 |CForm::elements| and |CForm::buttons| properties need special attention as
 they are the main properties to be configured. To configure
 |CForm::elements|, we should give it an array like the following:
>
 'elements'=>array(
     'username'=>array('type'=>'text', 'maxlength'=>80),
     'password'=>array('type'=>'password', 'maxlength'=>80),
 )
<
 The above code specifies two input elements: 'username' and 'password'. Note
 the model object must have exactly the same attributes 'username' and
 'password'. Each element has a type which specifies what kind of input should
 be used. The rest of the array elements (e.g. 'maxlength') in an input
 specification are rendered as HTML element attributes when the input field is
 rendered. The |CForm::buttons| property is configured similarly.

 For more details about configuring form elements, please refer to
 |CFormInputElement| and |CFormButtonElement|.


PROPERTY DETAILS
------------------------------------------------------------------------------

<action>				*CForm::action*
 (mixed) the form action URL (see |CHtml::normalizeUrl| for details about this
 parameter.) Defaults to an empty string, meaning the current request URL.
 This property is ignored when this form is a sub-form.

<activeForm>				*CForm::activeForm*
 (array) the configuration used to create the active form widget. The widget
 will be used to render the form tag and the error messages. The 'class'
 option is required, which specifies the class of the widget. The rest of the
 options will be passed to |CBaseController::beginWidget| call. Defaults to
 array('class'=>'CActiveForm').

<activeFormWidget>			*CForm::activeFormWidget*
 (CActiveForm) the active form widget associated with this form. This method
 will return the active form widget as specified by |CForm::activeForm|.

<attributes>				*CForm::attributes*
 (array) HTML attribute values for the form tag. When the form is embedded
 within another form, this property will be used to render the HTML attribute
 values for the fieldset enclosing the child form.

<buttonElementClass>			*CForm::buttonElementClass*
 (string) the name of the class for representing a form button element.
 Defaults to 'CFormButtonElement'.

<buttons>				*CForm::buttons*
 (CFormElementCollection) Returns the button elements of this form. Note that
 the returned result is a |CFormElementCollection| object, which means you can
 use it like an array. For more details, see |CMap|.

<description>				*CForm::description*
 (string) the description of this form.

<elements>				*CForm::elements*
 (CFormElementCollection) Returns the input elements of this form. This
 includes text strings, input elements and sub-forms. Note that the returned
 result is a |CFormElementCollection| object, which means you can use it like
 an array. For more details, see |CMap|.

<inputElementClass>			*CForm::inputElementClass*
 (string) the name of the class for representing a form input element.
 Defaults to 'CFormInputElement'.

<method>				*CForm::method*
 (string) the submission method of this form. Defaults to 'post'. This
 property is ignored when this form is a sub-form.

<model> 				*CForm::model*
 (CModel) Returns the model that this form is associated with.

<models>				*CForm::models*
 (array) Returns all models that are associated with this form or its
 sub-forms.

<owner> 				*CForm::owner*
 (CBaseController) the owner of this form. This refers to either a controller
 or a widget by which the form is created and rendered.

<root>					*CForm::root*
 (CForm) the top-level form object

<showErrorSummary>			*CForm::showErrorSummary*
 (boolean) whether to show error summary. Defaults to false.

<title> 				*CForm::title*
 (string) the title for this form. By default, if this is set, a fieldset may
 be rendered around the form body using the title as its legend. Defaults to
 null.

<uniqueId>				*CForm::uniqueId*
 (string) Returns a unique ID that identifies this form in the current page.



METHOD DETAILS
------------------------------------------------------------------------------

*CForm::__construct*						 public
>
 __construct($config, $model=NULL, $parent=NULL)
<
(void)

 Constructor. If you override this method, make sure you do not modify the
 method signature, and also make sure you call the parent implementation.
    [config] (mixed) the configuration for this form. It can be a
    configuration array or the path alias of a PHP script file that returns a
    configuration array. The configuration array consists of name-value pairs
    that are used to initialize the properties of this form.
    [model] (CModel) the model object associated with this form. If it is
    null, the parent's model will be used instead.
    [parent] (mixed) the direct parent of this form. This could be either a
    |CBaseController| object (a controller or a widget), or a |CForm| object.
    If the former, it means the form is a top-level form; if the latter, it
    means this form is a sub-form.


*CForm::addedElement*						 public
>
 addedElement($name, $element, $forButtons)
<
(void)

 This method is called after an element is added to the element collection.
    [name] (string) the name of the element
    [element] (CFormElement) the element that is added
    [forButtons] (boolean) whether the element is added to the
    |CForm::buttons| collection. If false, it means the element is added to
    the |CForm::elements| collection.


*CForm::clicked*						 public
>
 clicked($name)
<
(boolean) whether the button is clicked.

 Returns a value indicating whether the specified button is clicked.
    [name] (string) the button name


*CForm::evaluateVisible*					 protected
>
 evaluateVisible()
<
(boolean) whether this form is visible.

 Evaluates the visibility of this form. This method will check the visibility
 of the |CForm::elements|. If any one of them is visible, the form is
 considered as visible. Otherwise, it is invisible.


*CForm::getActiveFormWidget*					 public
>
 getActiveFormWidget()
<
(CActiveForm) the active form widget associated with this form. This method
will return the active form widget as specified by |CForm::activeForm|.



*CForm::getButtons*						 public
>
 getButtons()
<
(CFormElementCollection) the form elements.

 Returns the button elements of this form. Note that the returned result is a
 |CFormElementCollection| object, which means you can use it like an array.
 For more details, see |CMap|.


*CForm::getElements*						 public
>
 getElements()
<
(CFormElementCollection) the form elements.

 Returns the input elements of this form. This includes text strings, input
 elements and sub-forms. Note that the returned result is a
 |CFormElementCollection| object, which means you can use it like an array.
 For more details, see |CMap|.


*CForm::getModel*						 public
>
 getModel($checkParent=true)
<
(CModel) the model associated with this form. If this form does not have a
model, it will look for a model in its ancestors.

 Returns the model that this form is associated with.
    [checkParent] (boolean) whether to return parent's model if this form
    doesn't have model by itself.


*CForm::getModels*						 public
>
 getModels()
<
(array) the models that are associated with this form or its sub-forms.

 Returns all models that are associated with this form or its sub-forms.


*CForm::getOwner*						 public
>
 getOwner()
<
(CBaseController) the owner of this form. This refers to either a controller
or a widget by which the form is created and rendered.



*CForm::getRoot*						 public
>
 getRoot()
<
(CForm) the top-level form object



*CForm::getUniqueId*						 protected
>
 getUniqueId()
<
(string) the unique ID identifying this form

 Returns a unique ID that identifies this form in the current page.


*CForm::init*							 protected
>
 init()
<
(void)

 Initializes this form. This method is invoked at the end of the constructor.
 You may override this method to provide customized initialization (such as
 configuring the form object).


*CForm::loadData*						 public
>
 loadData()
<
(void)

 Loads the submitted data into the associated model(s) to the form. This
 method will go through all models associated with this form and its sub-forms
 and massively assign the submitted data to the models.


*CForm::offsetExists*						 public
>
 offsetExists($offset)
<
(boolean) 

 Returns whether there is an element at the specified offset. This method is
 required by the interface ArrayAccess.
    [offset] (mixed) the offset to check on


*CForm::offsetGet*						 public
>
 offsetGet($offset)
<
(mixed) the element at the offset, null if no element is found at the offset

 Returns the element at the specified offset. This method is required by the
 interface ArrayAccess.
    [offset] (integer) the offset to retrieve element.


*CForm::offsetSet*						 public
>
 offsetSet($offset, $item)
<
(void)

 Sets the element at the specified offset. This method is required by the
 interface ArrayAccess.
    [offset] (integer) the offset to set element
    [item] (mixed) the element value


*CForm::offsetUnset*						 public
>
 offsetUnset($offset)
<
(void)

 Unsets the element at the specified offset. This method is required by the
 interface ArrayAccess.
    [offset] (mixed) the offset to unset element


*CForm::removedElement* 					 public
>
 removedElement($name, $element, $forButtons)
<
(void)

 This method is called after an element is removed from the element
 collection.
    [name] (string) the name of the element
    [element] (CFormElement) the element that is removed
    [forButtons] (boolean) whether the element is removed from the
    |CForm::buttons| collection If false, it means the element is removed from
    the |CForm::elements| collection.


*CForm::render* 						 public
>
 render()
<
(string) the rendering result

 Renders the form. The default implementation simply calls
 |CForm::renderBegin|, |CForm::renderBody| and |CForm::renderEnd|.


*CForm::renderBegin*						 public
>
 renderBegin()
<
(string) the rendering result

 Renders the open tag of the form. The default implementation will render the
 open form tag.


*CForm::renderBody*						 public
>
 renderBody()
<
(string) the rendering result

 Renders the body content of this form. This method mainly renders
 |CForm::elements| and |CForm::buttons|. If |CForm::title| or
 |CForm::description| is specified, they will be rendered as well. And if the
 associated model contains error, the error summary may also be displayed. The
 form tag will not be rendered. Please call |CForm::renderBegin| and
 |CForm::renderEnd| to render the open and close tags of the form. You may
 override this method to customize the rendering of the form.


*CForm::renderButtons*						 public
>
 renderButtons()
<
(string) the rendering result

 Renders the |CForm::buttons| in this form.


*CForm::renderElement*						 public
>
 renderElement($element)
<
(string) the rendering result

 Renders a single element which could be an input element, a sub-form, a
 string, or a button.
    [element] (mixed) the form element to be rendered. This can be either a
    |CFormElement| instance or a string representing the name of the form
    element.


*CForm::renderElements* 					 public
>
 renderElements()
<
(string) the rendering result

 Renders the |CForm::elements| in this form.


*CForm::renderEnd*						 public
>
 renderEnd()
<
(string) the rendering result

 Renders the close tag of the form.


*CForm::setButtons*						 public
>
 setButtons($buttons)
<
(void)

 Configures the buttons of this form. The configuration must be an array of
 button configuration array indexed by button name. Each button configuration
 array consists of name-value pairs that are used to initialize a
 |CFormButtonElement| object.
    [buttons] (array) the button configurations


*CForm::setElements*						 public
>
 setElements($elements)
<
(void)

 Configures the input elements of this form. The configuration must be an
 array of input configuration array indexed by input name. Each input
 configuration array consists of name-value pairs that are used to initialize
 a |CFormStringElement| object (when 'type' is 'string'), a |CFormElement|
 object (when 'type' is a string ending with 'Form'), or a |CFormInputElement|
 object in all other cases.
    [elements] (array) the button configurations


*CForm::setModel*						 public
>
 setModel($model)
<
(void)

    [model] (CModel) the model to be associated with this form


*CForm::submitted*						 public
>
 submitted($buttonName='submit', $loadData=true)
<
(boolean) whether this form is submitted.

 Returns a value indicating whether this form is submitted.
    [buttonName] (string) the name of the submit button
    [loadData] (boolean) whether to call |CForm::loadData| if the form is
    submitted so that the submitted data can be populated to the associated
    models.


*CForm::validate*						 public
>
 validate()
<
(boolean) whether all models are valid

 Validates the models associated with this form. All models, including those
 associated with sub-forms, will perform the validation. You may use
 |CModel::getErrors| to retrieve the validation error messages.



 vim:tw=78:ts=8:ft=help:norl:

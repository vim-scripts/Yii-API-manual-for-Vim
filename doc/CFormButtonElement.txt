
*CFormButtonElement*   >> |CFormElement| >> |CComponent|
====================

 CFormButtonElement represents a form button element.

 CFormButtonElement can represent the following types of button based on
 |CFormButtonElement::type| property:
   {htmlButton} a normal button generated using |CHtml::htmlButton|
   htmlReset a reset button generated using |CHtml::htmlButton|
   {htmlSubmit} a submit button generated using |CHtml::htmlButton|
   {submit} a submit button generated using |CHtml::submitButton|
   {button} a normal button generated using |CHtml::button|
   {image} an image button generated using |CHtml::imageButton|
   {reset} a reset button generated using |CHtml::resetButton|
   {link} a link button generated using |CHtml::linkButton|The
 |CFormButtonElement::type| property can also be a class name or a path alias
 to the class. In this case, the button is generated using a widget of the
 specified class. Note, the widget must have a property called "name".

 Because CFormElement is an ancestor class of CFormButtonElement, a value
 assigned to a non-existing property will be stored in
 |CFormButtonElement::attributes| which will be passed as HTML attribute
 values to the |CHtml| method generating the button or initial values of the
 widget properties.


PROPERTY DETAILS
------------------------------------------------------------------------------

<coreTypes>				*CFormButtonElement::coreTypes*
 (array) Core button types (alias=>CHtml method name)

<label> 				*CFormButtonElement::label*
 (string) the label of this button. This property is ignored when a widget is
 used to generate the button.

<name>					*CFormButtonElement::name*
 (string) name of this button

<on>					*CFormButtonElement::on*
 (string) Returns a value indicating under which scenarios this button is
 visible. If the value is empty, it means the button is visible under all
 scenarios. Otherwise, only when the model is in the scenario whose name can
 be found in this value, will the button be visible. See |CModel::scenario|
 for more information about model scenarios.

<type>					*CFormButtonElement::type*
 (string) the type of this button. This can be a class name, a path alias of a
 class name, or a button type alias (submit, button, image, reset, link,
 htmlButton, htmlSubmit, htmlReset).



METHOD DETAILS
------------------------------------------------------------------------------

*CFormButtonElement::evaluateVisible*				 protected
>
 evaluateVisible()
<
(boolean) whether this element is visible.

 Evaluates the visibility of this element. This method will check the
 |CFormButtonElement::on| property to see if the model is in a scenario that
 should have this string displayed.


*CFormButtonElement::getOn*					 public
>
 getOn()
<
(string) scenario names separated by commas. Defaults to null.

 Returns a value indicating under which scenarios this button is visible. If
 the value is empty, it means the button is visible under all scenarios.
 Otherwise, only when the model is in the scenario whose name can be found in
 this value, will the button be visible. See |CModel::scenario| for more
 information about model scenarios.


*CFormButtonElement::render*					 public
>
 render()
<
(string) the rendering result

 Returns this button.


*CFormButtonElement::setOn*					 public
>
 setOn($value)
<
(void)

    [value] (string) scenario names separated by commas.



 vim:tw=78:ts=8:ft=help:norl:

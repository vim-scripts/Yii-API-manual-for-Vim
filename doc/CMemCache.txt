
*CMemCache*   >> |CCache| >> |CApplicationComponent| >> |CComponent|
===========

 CMemCache implements a cache application component based on 'memcached'.

 CMemCache can be configured with a list of memcache servers by settings its
 |CMemCache::setServers| property. By default, CMemCache assumes there is a
 memcache server running on localhost at port 11211.

 See |CCache| manual for common cache operations that are supported by
 CMemCache.

 Note, there is no security measure to protected data in memcache. All data in
 memcache can be accessed by any process running in the system.

 To use CMemCache as the cache application component, configure the
 application as follows,
>
 array(
     'components'=>array(
         'cache'=>array(
             'class'=>'CMemCache',
             'servers'=>array(
                 array(
                     'host'=>'server1',
                     'port'=>11211,
                     'weight'=>60,
                 ),
                 array(
                     'host'=>'server2',
                     'port'=>11211,
                     'weight'=>40,
                 ),
             ),
         ),
     ),
 )
<
 In the above, two memcache servers are used: server1 and server2. You can
 configure more properties of every server, including: host, port, persistent,
 weight, timeout, retryInterval, status. See
 'http://www.php.net/manual/en/function.memcache-addserver.php' for more
 details.

 CMemCache can also be used with 'memcached'. To do so, set
 |CMemCache::useMemcached| to be true.


PROPERTY DETAILS
------------------------------------------------------------------------------

<memCache>				*CMemCache::memCache*
 (mixed) the memcache instance (or memcached if |CMemCache::useMemcached| is
 true) used by this component.

<servers>				*CMemCache::servers*
 (array) list of memcache server configurations. Each element is a
 |CMemCacheServerConfiguration|.

<useMemcached>				*CMemCache::useMemcached*
 (boolean) whether to use memcached or memcache as the underlying caching
 extension. If true 'memcached' will be used. If false 'memcache'. will be
 used. Defaults to false.



METHOD DETAILS
------------------------------------------------------------------------------

*CMemCache::addValue*						 protected
>
 addValue($key, $value, $expire)
<
(boolean) true if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key into cache if the cache does not contain
 this key. This is the implementation of the method declared in the parent
 class.
    [key] (string) the key identifying the value to be cached
    [value] (string) the value to be cached
    [expire] (integer) the number of seconds in which the cached value will
    expire. 0 means never expire.


*CMemCache::deleteValue*					 protected
>
 deleteValue($key)
<
(boolean) if no error happens during deletion

 Deletes a value with the specified key from cache This is the implementation
 of the method declared in the parent class.
    [key] (string) the key of the value to be deleted


*CMemCache::flushValues*					 protected
>
 flushValues()
<
(boolean) whether the flush operation was successful.

 Deletes all values from cache. This is the implementation of the method
 declared in the parent class.


*CMemCache::getMemCache*					 public
>
 getMemCache()
<
(mixed) the memcache instance (or memcached if |CMemCache::useMemcached| is
true) used by this component.



*CMemCache::getServers* 					 public
>
 getServers()
<
(array) list of memcache server configurations. Each element is a
|CMemCacheServerConfiguration|.



*CMemCache::getValue*						 protected
>
 getValue($key)
<
(string) the value stored in cache, false if the value is not in the cache or
expired.

 Retrieves a value from cache with a specified key. This is the implementation
 of the method declared in the parent class.
    [key] (string) a unique key identifying the cached value


*CMemCache::getValues*						 protected
>
 getValues($keys)
<
(array) a list of cached values indexed by the keys

 Retrieves multiple values from cache with the specified keys.
    [keys] (array) a list of keys identifying the cached values


*CMemCache::init*						 public
>
 init()
<
(void)

 Initializes this application component. This method is required by the
 |IApplicationComponent| interface. It creates the memcache instance and adds
 memcache servers.


*CMemCache::setServers* 					 public
>
 setServers($config)
<
(void)

    [config] (array) list of memcache server configurations. Each element must
    be an array with the following keys: host, port, persistent, weight,
    timeout, retryInterval, status.


*CMemCache::setValue*						 protected
>
 setValue($key, $value, $expire)
<
(boolean) true if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key in cache. This is the implementation of
 the method declared in the parent class.
    [key] (string) the key identifying the value to be cached
    [value] (string) the value to be cached
    [expire] (integer) the number of seconds in which the cached value will
    expire. 0 means never expire.



 vim:tw=78:ts=8:ft=help:norl:


*CSqliteSchema*   >> |CDbSchema| >> |CComponent|
===============

 CSqliteSchema is the class for retrieving metadata information from a SQLite
 (2/3) database.


PROPERTY DETAILS
------------------------------------------------------------------------------

<columnTypes>				*CSqliteSchema::columnTypes*
 (array) the abstract column types mapped to physical column types.



METHOD DETAILS
------------------------------------------------------------------------------

*CSqliteSchema::addForeignKey*					 public
>
 addForeignKey($name, $table, $columns, $refTable, $refColumns, $delete='', $update='')
<
(string) the SQL statement for adding a foreign key constraint to an existing
table.

 Builds a SQL statement for adding a foreign key constraint to an existing
 table. Because SQLite does not support adding foreign key to an existing
 table, calling this method will throw an exception.
    [name] (string) the name of the foreign key constraint.
    [table] (string) the table that the foreign key constraint will be added
    to.
    [columns] (string) the name of the column to that the constraint will be
    added on. If there are multiple columns, separate them with commas.
    [refTable] (string) the table that the foreign key references to.
    [refColumns] (string) the name of the column that the foreign key
    references to. If there are multiple columns, separate them with commas.
    [delete] (string) the ON DELETE option. Most DBMS support these options:
    RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
    [update] (string) the ON UPDATE option. Most DBMS support these options:
    RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL


*CSqliteSchema::alterColumn*					 public
>
 alterColumn($table, $column, $type)
<
(string) the SQL statement for changing the definition of a column.

 Builds a SQL statement for changing the definition of a column. Because
 SQLite does not support altering a DB column, calling this method will throw
 an exception.
    [table] (string) the table whose column is to be changed. The table name
    will be properly quoted by the method.
    [column] (string) the name of the column to be changed. The name will be
    properly quoted by the method.
    [type] (string) the new column type. The |CSqliteSchema::getColumnType|
    method will be invoked to convert abstract column type (if any) into the
    physical one. Anything that is not recognized as abstract type will be
    kept in the generated SQL. For example, 'string' will be turned into
    'varchar(255)', while 'string not null' will become 'varchar(255) not
    null'.


*CSqliteSchema::checkIntegrity* 				 public
>
 checkIntegrity($check=true, $schema='')
<
(void)

 Enables or disables integrity check.
    [check] (boolean) whether to turn on or off the integrity check.
    [schema] (string) the schema of the tables. Defaults to empty string,
    meaning the current or default schema.


*CSqliteSchema::createColumn*					 protected
>
 createColumn($column)
<
(CDbColumnSchema) normalized column metadata

 Creates a table column.
    [column] (array) column metadata


*CSqliteSchema::createCommandBuilder*				 protected
>
 createCommandBuilder()
<
(CSqliteCommandBuilder) command builder instance

 Creates a command builder for the database.


*CSqliteSchema::dropColumn*					 public
>
 dropColumn($table, $column)
<
(string) the SQL statement for dropping a DB column.

 Builds a SQL statement for dropping a DB column. Because SQLite does not
 support dropping a DB column, calling this method will throw an exception.
    [table] (string) the table whose column is to be dropped. The name will be
    properly quoted by the method.
    [column] (string) the name of the column to be dropped. The name will be
    properly quoted by the method.


*CSqliteSchema::dropForeignKey* 				 public
>
 dropForeignKey($name, $table)
<
(string) the SQL statement for dropping a foreign key constraint.

 Builds a SQL statement for dropping a foreign key constraint. Because SQLite
 does not support dropping a foreign key constraint, calling this method will
 throw an exception.
    [name] (string) the name of the foreign key constraint to be dropped. The
    name will be properly quoted by the method.
    [table] (string) the table whose foreign is to be dropped. The name will
    be properly quoted by the method.


*CSqliteSchema::dropIndex*					 public
>
 dropIndex($name, $table)
<
(string) the SQL statement for dropping an index.

 Builds a SQL statement for dropping an index.
    [name] (string) the name of the index to be dropped. The name will be
    properly quoted by the method.
    [table] (string) the table whose index is to be dropped. The name will be
    properly quoted by the method.


*CSqliteSchema::findColumns*					 protected
>
 findColumns($table)
<
(boolean) whether the table exists in the database

 Collects the table column metadata.
    [table] (CDbTableSchema) the table metadata


*CSqliteSchema::findConstraints*				 protected
>
 findConstraints($table)
<
(void)

 Collects the foreign key column details for the given table.
    [table] (CDbTableSchema) the table metadata


*CSqliteSchema::findTableNames* 				 protected
>
 findTableNames($schema='')
<
(array) all table names in the database.

 Returns all table names in the database.
    [schema] (string) the schema of the tables. This is not used for sqlite
    database.


*CSqliteSchema::loadTable*					 protected
>
 loadTable($name)
<
(CDbTableSchema) driver dependent table metadata. Null if the table does not
exist.

 Loads the metadata for the specified table.
    [name] (string) table name


*CSqliteSchema::renameColumn*					 public
>
 renameColumn($table, $name, $newName)
<
(string) the SQL statement for renaming a DB column.

 Builds a SQL statement for renaming a column. Because SQLite does not support
 renaming a DB column, calling this method will throw an exception.
    [table] (string) the table whose column is to be renamed. The name will be
    properly quoted by the method.
    [name] (string) the old name of the column. The name will be properly
    quoted by the method.
    [newName] (string) the new name of the column. The name will be properly
    quoted by the method.


*CSqliteSchema::resetSequence*					 public
>
 resetSequence($table, $value=NULL)
<
(void)

 Resets the sequence value of a table's primary key. The sequence will be
 reset such that the primary key of the next new row inserted will have the
 specified value or 1.
    [table] (CDbTableSchema) the table schema whose primary key sequence will
    be reset
    [value] (mixed) the value for the primary key of the next new row
    inserted. If this is not set, the next new row's primary key will have a
    value 1.


*CSqliteSchema::truncateTable*					 public
>
 truncateTable($table)
<
(string) the SQL statement for truncating a DB table.

 Builds a SQL statement for truncating a DB table.
    [table] (string) the table to be truncated. The name will be properly
    quoted by the method.



 vim:tw=78:ts=8:ft=help:norl:

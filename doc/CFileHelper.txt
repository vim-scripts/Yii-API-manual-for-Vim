
*CFileHelper*  
=============

 CFileHelper provides a set of helper methods for common file system
 operations.



METHOD DETAILS
------------------------------------------------------------------------------

*CFileHelper::copyDirectory*					 public
>
 copyDirectory($src, $dst, $options=array())
<
(void)

 Copies a directory recursively as another. If the destination directory does
 not exist, it will be created.
    [src] (string) the source directory
    [dst] (string) the destination directory
    [options] (array) options for directory copy. Valid options are:
      {fileTypes} array, list of file name suffix (without dot). Only
      files with these suffixes will be copied.
      {exclude} array, list of directory and file exclusions. Each
      exclusion can be either a name or a path. If a file or directory
      name or path matches the exclusion, it will not be copied. For
      example, an exclusion of '.svn' will exclude all files and
      directories whose name is '.svn'. And an exclusion of '/a/b' will
      exclude file or directory '$src/a/b'. Note, that '/' should be
      used as separator regardless of the value of the
      DIRECTORY_SEPARATOR constant.
      {level} integer, recursion depth, default=-1. Level -1 means
      copying all directories and files under the directory; Level 0
      means copying only the files DIRECTLY under the directory; level N
      means copying those directories that are within N levels.


*CFileHelper::copyDirectoryRecursive*				 protected
>
 copyDirectoryRecursive($src, $dst, $base, $fileTypes, $exclude, $level, $options)
<
(void)

 Copies a directory. This method is mainly used by
 |CFileHelper::copyDirectory|.
    [src] (string) the source directory
    [dst] (string) the destination directory
    [base] (string) the path relative to the original source directory
    [fileTypes] (array) list of file name suffix (without dot). Only files
    with these suffixes will be copied.
    [exclude] (array) list of directory and file exclusions. Each exclusion
    can be either a name or a path. If a file or directory name or path
    matches the exclusion, it will not be copied. For example, an exclusion of
    '.svn' will exclude all files and directories whose name is '.svn'. And an
    exclusion of '/a/b' will exclude file or directory '$src/a/b'. Note, that
    '/' should be used as separator regardless of the value of the
    DIRECTORY_SEPARATOR constant.
    [level] (integer) recursion depth. It defaults to -1. Level -1 means
    copying all directories and files under the directory; Level 0 means
    copying only the files DIRECTLY under the directory; level N means copying
    those directories that are within N levels.
    [options] (array) additional options. The following options are supported:
    newDirMode - the permission to be set for newly copied directories
    (defaults to 0777); newFileMode - the permission to be set for newly
    copied files (defaults to the current environment setting).


*CFileHelper::findFiles*					 public
>
 findFiles($dir, $options=array())
<
(array) files found under the directory. The file list is sorted.

 Returns the files found under the specified directory and subdirectories.
    [dir] (string) the directory under which the files will be looked for
    [options] (array) options for file searching. Valid options are:
      {fileTypes} array, list of file name suffix (without dot). Only
      files with these suffixes will be returned.
      {exclude} array, list of directory and file exclusions. Each
      exclusion can be either a name or a path. If a file or directory
      name or path matches the exclusion, it will not be copied. For
      example, an exclusion of '.svn' will exclude all files and
      directories whose name is '.svn'. And an exclusion of '/a/b' will
      exclude file or directory '$src/a/b'. Note, that '/' should be
      used as separator regardless of the value of the
      DIRECTORY_SEPARATOR constant.
      {level} integer, recursion depth, default=-1. Level -1 means
      searching for all directories and files under the directory; Level
      0 means searching for only the files DIRECTLY under the directory;
      level N means searching for those directories that are within N
      levels.


*CFileHelper::findFilesRecursive*				 protected
>
 findFilesRecursive($dir, $base, $fileTypes, $exclude, $level)
<
(array) files found under the directory.

 Returns the files found under the specified directory and subdirectories.
 This method is mainly used by |CFileHelper::findFiles|.
    [dir] (string) the source directory
    [base] (string) the path relative to the original source directory
    [fileTypes] (array) list of file name suffix (without dot). Only files
    with these suffixes will be returned.
    [exclude] (array) list of directory and file exclusions. Each exclusion
    can be either a name or a path. If a file or directory name or path
    matches the exclusion, it will not be copied. For example, an exclusion of
    '.svn' will exclude all files and directories whose name is '.svn'. And an
    exclusion of '/a/b' will exclude file or directory '$src/a/b'. Note, that
    '/' should be used as separator regardless of the value of the
    DIRECTORY_SEPARATOR constant.
    [level] (integer) recursion depth. It defaults to -1. Level -1 means
    searching for all directories and files under the directory; Level 0 means
    searching for only the files DIRECTLY under the directory; level N means
    searching for those directories that are within N levels.


*CFileHelper::getExtension*					 public
>
 getExtension($path)
<
(string) the extension name without the dot character.

 Returns the extension name of a file path. For example, the path
 "path/to/something.php" would return "php".
    [path] (string) the file path


*CFileHelper::getMimeType*					 public
>
 getMimeType($file, $magicFile='', $checkExtension=true)
<
(string) the MIME type. Null is returned if the MIME type cannot be
determined.

 Determines the MIME type of the specified file. This method will attempt the
 following approaches in order:

   1. finfo
   2. mime_content_type
   3. |CFileHelper::getMimeTypeByExtension|, when $checkExtension is
   set true.


    [file] (string) the file name.
    [magicFile] (string) name of a magic database file, usually something like
    /path/to/magic.mime. This will be passed as the second parameter to
    'finfo_open'. This parameter has been available since version 1.1.3.
    [checkExtension] (boolean) whether to check the file extension in case the
    MIME type cannot be determined based on finfo and mim_content_type.
    Defaults to true. This parameter has been available since version 1.1.4.


*CFileHelper::getMimeTypeByExtension*				 public
>
 getMimeTypeByExtension($file, $magicFile='')
<
(string) the MIME type. Null is returned if the MIME type cannot be
determined.

 Determines the MIME type based on the extension name of the specified file.
 This method will use a local map between extension name and MIME type.
    [file] (string) the file name.
    [magicFile] (string) the path of the file that contains all available MIME
    type information. If this is not set, the default 'system.utils.mimeTypes'
    file will be used. This parameter has been available since version 1.1.3.


*CFileHelper::validatePath*					 protected
>
 validatePath($base, $file, $isFile, $fileTypes, $exclude)
<
(boolean) whether the file or directory is valid

 Validates a file or directory.
    [base] (string) the path relative to the original source directory
    [file] (string) the file or directory name
    [isFile] (boolean) whether this is a file
    [fileTypes] (array) list of file name suffix (without dot). Only files
    with these suffixes will be copied.
    [exclude] (array) list of directory and file exclusions. Each exclusion
    can be either a name or a path. If a file or directory name or path
    matches the exclusion, it will not be copied. For example, an exclusion of
    '.svn' will exclude all files and directories whose name is '.svn'. And an
    exclusion of '/a/b' will exclude file or directory '$src/a/b'. Note, that
    '/' should be used as separator regardless of the value of the
    DIRECTORY_SEPARATOR constant.



 vim:tw=78:ts=8:ft=help:norl:

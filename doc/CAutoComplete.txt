
*CAutoComplete*   >> |CInputWidget| >> |CWidget| >> |CBaseController| >> |CComponent|
===============

 CAutoComplete generates an auto-complete text field.

 CAutoComplete is based on the 'jQuery Autocomplete'.

 This class is deprecated since Yii 1.1.3. Consider using CJuiAutoComplete.
 There is 'a good migration guide from the author of both JavaScript
 solutions'.


PROPERTY DETAILS
------------------------------------------------------------------------------

<autoFill>				*CAutoComplete::autoFill*
 (boolean) fill the textinput while still selecting a value, replacing the
 value if more is typed or something else is selected. Defaults to false.

<cacheLength>				*CAutoComplete::cacheLength*
 (integer) the number of backend query results to store in cache. If set to 1
 (the current result), no caching will happen. Must be >= 1. Defaults to 10.

<clientOptions> 			*CAutoComplete::clientOptions*
 (array) the javascript options

<cssFile>				*CAutoComplete::cssFile*
 (mixed) the CSS file used for the widget. Defaults to null, meaning using the
 default CSS file included together with the widget. If false, no CSS file
 will be used. Otherwise, the specified CSS file will be included when using
 this widget.

<data>					*CAutoComplete::data*
 (array) data that would be saved as client-side data to provide candidate
 selections. Each array element can be string or an associative array. The
 |CAutoComplete::url| property will be ignored if this property is set.

<delay> 				*CAutoComplete::delay*
 (integer) the delay in milliseconds the autocompleter waits after a keystroke
 to activate itself. Defaults to 400.

<extraParams>				*CAutoComplete::extraParams*
 (array) extra parameters for the backend. If you were to specify
 array('bar'=>4), the autocompleter would call the backend with a GET
 parameter 'bar' 4. The param can be a function that is called to calculate
 the param before each request.

<formatItem>				*CAutoComplete::formatItem*
 (string) a javascript function that provides advanced markup for an item. For
 each row of results, this function will be called. The returned value will be
 displayed inside an LI element in the results list. Autocompleter will
 provide 4 parameters: the results row, the position of the row in the list of
 results (starting at 1), the number of items in the list of results and the
 search term. The default behavior assumes that a single row contains a single
 value.

<formatMatch>				*CAutoComplete::formatMatch*
 (string) a javascript function that can be used to limit the data that
 autocomplete searches for matches. For example, there may be items you want
 displayed to the user, but don't want included in the data that's searched.
 The function is called with the same arguments as
 |CAutoComplete::formatItem|. Defaults to formatItem.

<formatResult>				*CAutoComplete::formatResult*
 (string) a javascript function that provides the formatting for the value to
 be put into the input field. Again three arguments: Data, position (starting
 with one) and total number of data. The default behavior assumes either plain
 data to use as result or uses the same value as provided by formatItem.

<highlight>				*CAutoComplete::highlight*
 (boolean|string) Whether and how to highlight matches in the select box. Set
 to false to disable. Set to a javascript function to customize. The function
 gets the value as the first argument and the search term as the second and
 must return the formatted value. Defaults to Wraps the search term in a
 &lt;strong&gt; element.

<inputClass>				*CAutoComplete::inputClass*
 (string) the CSS class for the input element. Defaults to "ac_input".

<loadingClass>				*CAutoComplete::loadingClass*
 (string) the CSS class used when the data is being loaded from backend.
 Defaults to "ac_loading".

<matchCase>				*CAutoComplete::matchCase*
 (boolean) whether or not the comparison is case sensitive. Important only if
 you use caching. Defaults to false.

<matchContains> 			*CAutoComplete::matchContains*
 (boolean) whether or not the comparison looks inside (i.e. does "ba" match
 "foo bar") the search results. Important only if you use caching. Don't mix
 with autofill. Defaults to false.

<matchSubset>				*CAutoComplete::matchSubset*
 (boolean) whether or not the autocompleter can use a cache for more specific
 queries. This means that all matches of "foot" are a subset of all matches
 for "foo". Usually this is true, and using this options decreases server load
 and increases performance. Only useful with cacheLength settings bigger than
 one, like 10. Defaults to true.

<max>					*CAutoComplete::max*
 (integer) limit the number of items in the select box. Is also sent as a
 "limit" parameter with a remote request. Defaults to 10.

<methodChain>				*CAutoComplete::methodChain*
 (string) the chain of method calls that would be appended at the end of the
 autocomplete constructor. For example, ".result(function(...){})" would cause
 the specified js function to execute when the user selects an option.

<minChars>				*CAutoComplete::minChars*
 (integer) the minimum number of characters a user has to type before the
 autocompleter activates. Defaults to 1.

<multiple>				*CAutoComplete::multiple*
 (boolean) whether to allow more than one autocompleted-value to enter.
 Defaults to false.

<multipleSeparator>			*CAutoComplete::multipleSeparator*
 (string) seperator to put between values when using multiple option. Defaults
 to ", ".

<mustMatch>				*CAutoComplete::mustMatch*
 (boolean) if set to true, the autocompleter will only allow results that are
 presented by the backend. Note that illegal values result in an empty input
 box. Defaults to false.

<options>				*CAutoComplete::options*
 (array) additional options that can be passed to the constructor of the
 autocomplete js object. This allows you to override existing functions of the
 autocomplete js class (e.g. the parse() function)

 If you want to provide JavaScript native code, you have to prefix the string
 with js: otherwise it will be enclosed by quotes.

<resultsClass>				*CAutoComplete::resultsClass*
 (string) the CSS class for the dropdown list. Defaults to "ac_results".

<scroll>				*CAutoComplete::scroll*
 (boolean) whether to scroll when more results than configured via
 scrollHeight are available. Defaults to true.

<scrollHeight>				*CAutoComplete::scrollHeight*
 (integer) height of scrolled autocomplete control in pixels. Defaults to 180.

<selectFirst>				*CAutoComplete::selectFirst*
 (boolean) if this is set to true, the first autocomplete value will be
 automatically selected on tab/return, even if it has not been handpicked by
 keyboard or mouse action. If there is a handpicked (highlighted) result, that
 result will take precedence. Defaults to true.

<textArea>				*CAutoComplete::textArea*
 (boolean) whether to show the autocomplete using a text area. Defaults to
 false, meaning a text field is used.

<url>					*CAutoComplete::url*
 (string|array) the URL that can return the candidate selections. A 'q' GET
 parameter will be sent with the URL which contains what the user has entered
 so far. If the URL is given as an array, it is considered as a route to a
 controller action and will be used to generate a URL using
 |CController::createUrl|; If the URL is an empty string, the currently
 requested URL is used. This property will be ignored if |CAutoComplete::data|
 is set.

<width> 				*CAutoComplete::width*
 (integer) specify a custom width for the select box. Defaults to the width of
 the input element.



METHOD DETAILS
------------------------------------------------------------------------------

*CAutoComplete::getClientOptions*				 protected
>
 getClientOptions()
<
(array) the javascript options



*CAutoComplete::init*						 public
>
 init()
<
(void)

 Initializes the widget. This method registers all needed client scripts and
 renders the autocomplete input.


*CAutoComplete::registerClientScript*				 public
>
 registerClientScript()
<
(void)

 Registers the needed CSS and JavaScript.


*CAutoComplete::registerCssFile*				 public
>
 registerCssFile($url='')
<
(void)

 Registers the needed CSS file.
    [url] (string) the CSS URL. If null, a default CSS URL will be used.



 vim:tw=78:ts=8:ft=help:norl:


*CBaseListView*   >> |CWidget| >> |CBaseController| >> |CComponent|
===============

 CBaseListView is the base class for |CListView| and |CGridView|.

 CBaseListView implements the common features needed by a view wiget for
 rendering multiple models.


PROPERTY DETAILS
------------------------------------------------------------------------------

<dataProvider>				*CBaseListView::dataProvider*
 (IDataProvider) the data provider for the view.

<emptyText>				*CBaseListView::emptyText*
 (string) the message to be displayed when |CBaseListView::dataProvider| does
 not have any data.

<enablePagination>			*CBaseListView::enablePagination*
 (boolean) whether to enable pagination. Note that if the
 |IDataProvider::pagination| property of |CBaseListView::dataProvider| is
 false, this will be treated as false as well. When pagination is enabled, a
 pager will be displayed in the view so that it can trigger pagination of the
 data display. Defaults to true.

<enableSorting> 			*CBaseListView::enableSorting*
 (boolean) whether to enable sorting. Note that if the |IDataProvider::sort|
 property of |CBaseListView::dataProvider| is false, this will be treated as
 false as well. When sorting is enabled, sortable columns will have their
 headers clickable to trigger sorting along that column. Defaults to true.

<htmlOptions>				*CBaseListView::htmlOptions*
 (array) the HTML options for the view container tag.

<itemsCssClass> 			*CBaseListView::itemsCssClass*
 (string) the CSS class name for the container of all data item display.
 Defaults to 'items'.

<loadingCssClass>			*CBaseListView::loadingCssClass*
 (string) the CSS class name that will be assigned to the widget container
 element when the widget is updating its content via AJAX. Defaults to
 'loading'.

<pager> 				*CBaseListView::pager*
 (array) the configuration for the pager. Defaults to
 'array('class'=>'CLinkPager')'.

<pagerCssClass> 			*CBaseListView::pagerCssClass*
 (string) the CSS class name for the pager container. Defaults to 'pager'.

<summaryCssClass>			*CBaseListView::summaryCssClass*
 (string) the CSS class name for the summary text container. Defaults to
 'summary'.

<summaryText>				*CBaseListView::summaryText*
 (string) the summary text template for the view. These tokens are recognized
 and will be replaced with the corresponding values:
   {start}: the starting row number (1-based) currently being
   displayed
   {end}: the ending row number (1-based) currently being displayed
   {count}: the total number of rows
   {page}: the page number (1-based) current being displayed,
   available since version 1.1.3
   {pages}: the total number of pages, available since version 1.1.3

<tagName>				*CBaseListView::tagName*
 (string) the tag name for the view container. Defaults to 'div'.

<template>				*CBaseListView::template*
 (string) the template to be used to control the layout of various sections in
 the view. These tokens are recognized: {summary}, {items} and {pager}. They
 will be replaced with the summary text, the items, and the pager.



METHOD DETAILS
------------------------------------------------------------------------------

*CBaseListView::init*						 public
>
 init()
<
(void)

 Initializes the view. This method will initialize required property values
 and instantiate columns objects.


*CBaseListView::registerClientScript*				 public
>
 registerClientScript()
<
(void)

 Registers necessary client scripts. This method is invoked by
 |CBaseListView::run|. Child classes may override this method to register
 customized client scripts.


*CBaseListView::renderContent*					 public
>
 renderContent()
<
(void)

 Renders the main content of the view. The content is divided into sections,
 such as summary, items, pager. Each section is rendered by a method named as
 "renderXyz", where "Xyz" is the section name. The rendering results will
 replace the corresponding placeholders in |CBaseListView::template|.


*CBaseListView::renderEmptyText*				 public
>
 renderEmptyText()
<
(void)

 Renders the empty message when there is no data.


*CBaseListView::renderItems*					 public
>
 renderItems()
<
(void)

 Renders the data items for the view. Each item is corresponding to a single
 data model instance. Child classes should override this method to provide the
 actual item rendering logic.


*CBaseListView::renderKeys*					 public
>
 renderKeys()
<
(void)

 Renders the key values of the data in a hidden tag.


*CBaseListView::renderPager*					 public
>
 renderPager()
<
(void)

 Renders the pager.


*CBaseListView::renderSection*					 protected
>
 renderSection($matches)
<
(string) the rendering result of the section

 Renders a section. This method is invoked by |CBaseListView::renderContent|
 for every placeholder found in |CBaseListView::template|. It should return
 the rendering result that would replace the placeholder.
    [matches] (array) the matches, where $matches[0] represents the whole
    placeholder, while $matches[1] contains the name of the matched
    placeholder.


*CBaseListView::renderSummary*					 public
>
 renderSummary()
<
(void)

 Renders the summary text.


*CBaseListView::run*						 public
>
 run()
<
(void)

 Renders the view. This is the main entry of the whole view rendering. Child
 classes should mainly override |CBaseListView::renderContent| method.



 vim:tw=78:ts=8:ft=help:norl:

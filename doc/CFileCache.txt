
*CFileCache*   >> |CCache| >> |CApplicationComponent| >> |CComponent|
============

 CFileCache provides a file-based caching mechanism.

 For each data value being cached, CFileCache will use store it in a separate
 file under |CFileCache::cachePath| which defaults to
 'protected/runtime/cache'. CFileCache will perform garbage collection
 automatically to remove expired cache files.

 See |CCache| manual for common cache operations that are supported by
 CFileCache.


PROPERTY DETAILS
------------------------------------------------------------------------------

<cacheFileSuffix>			*CFileCache::cacheFileSuffix*
 (string) cache file suffix. Defaults to '.bin'.

<cachePath>				*CFileCache::cachePath*
 (string) the directory to store cache files. Defaults to null, meaning using
 'protected/runtime/cache' as the directory.

<directoryLevel>			*CFileCache::directoryLevel*
 (integer) the level of sub-directories to store cache files. Defaults to 0,
 meaning no sub-directories. If the system has huge number of cache files
 (e.g. 10K+), you may want to set this value to be 1 or 2 so that the file
 system is not over burdened. The value of this property should not exceed 16
 (less than 3 is recommended).

<gCProbability> 			*CFileCache::gCProbability*
 (integer) the probability (parts per million) that garbage collection (GC)
 should be performed when storing a piece of data in the cache. Defaults to
 100, meaning 0.01% chance.



METHOD DETAILS
------------------------------------------------------------------------------

*CFileCache::addValue*						 protected
>
 addValue($key, $value, $expire)
<
(boolean) true if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key into cache if the cache does not contain
 this key. This is the implementation of the method declared in the parent
 class.
    [key] (string) the key identifying the value to be cached
    [value] (string) the value to be cached
    [expire] (integer) the number of seconds in which the cached value will
    expire. 0 means never expire.


*CFileCache::deleteValue*					 protected
>
 deleteValue($key)
<
(boolean) if no error happens during deletion

 Deletes a value with the specified key from cache This is the implementation
 of the method declared in the parent class.
    [key] (string) the key of the value to be deleted


*CFileCache::flushValues*					 protected
>
 flushValues()
<
(boolean) whether the flush operation was successful.

 Deletes all values from cache. This is the implementation of the method
 declared in the parent class.


*CFileCache::gc*						 public
>
 gc($expiredOnly=true, $path='')
<
(void)

 Removes expired cache files.
    [expiredOnly] (boolean) whether to removed expired cache files only. If
    true, all cache files under |CFileCache::cachePath| will be removed.
    [path] (string) the path to clean with. If null, it will be
    |CFileCache::cachePath|.


*CFileCache::getCacheFile*					 protected
>
 getCacheFile($key)
<
(string) the cache file path

 Returns the cache file path given the cache key.
    [key] (string) cache key


*CFileCache::getGCProbability*					 public
>
 getGCProbability()
<
(integer) the probability (parts per million) that garbage collection (GC)
should be performed when storing a piece of data in the cache. Defaults to
100, meaning 0.01% chance.



*CFileCache::getValue*						 protected
>
 getValue($key)
<
(string) the value stored in cache, false if the value is not in the cache or
expired.

 Retrieves a value from cache with a specified key. This is the implementation
 of the method declared in the parent class.
    [key] (string) a unique key identifying the cached value


*CFileCache::init*						 public
>
 init()
<
(void)

 Initializes this application component. This method is required by the
 |IApplicationComponent| interface. It checks the availability of memcache.


*CFileCache::setGCProbability*					 public
>
 setGCProbability($value)
<
(void)

    [value] (integer) the probability (parts per million) that garbage
    collection (GC) should be performed when storing a piece of data in the
    cache. Defaults to 100, meaning 0.01% chance. This number should be
    between 0 and 1000000. A value 0 meaning no GC will be performed at all.


*CFileCache::setValue*						 protected
>
 setValue($key, $value, $expire)
<
(boolean) true if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key in cache. This is the implementation of
 the method declared in the parent class.
    [key] (string) the key identifying the value to be cached
    [value] (string) the value to be cached
    [expire] (integer) the number of seconds in which the cached value will
    expire. 0 means never expire.



 vim:tw=78:ts=8:ft=help:norl:


*CDbCriteria*   >> |CComponent|
=============

 CDbCriteria represents a query criteria, such as conditions, ordering by,
 limit/offset.


PROPERTY DETAILS
------------------------------------------------------------------------------

<alias> 				*CDbCriteria::alias*
 (string) the alias name of the table. If not set, it means the alias is 't'.

<condition>				*CDbCriteria::condition*
 (string) query condition. This refers to the WHERE clause in an SQL
 statement. For example, 'age>31 AND team=1'.

<distinct>				*CDbCriteria::distinct*
 (boolean) whether to select distinct rows of data only. If this is set true,
 the SELECT clause would be changed to SELECT DISTINCT.

<group> 				*CDbCriteria::group*
 (string) how to group the query results. This refers to the GROUP BY clause
 in an SQL statement. For example, ''projectID, teamID''.

<having>				*CDbCriteria::having*
 (string) the condition to be applied with GROUP-BY clause. For example,
 ''SUM(revenue)<50000''.

<index> 				*CDbCriteria::index*
 (string) the name of the AR attribute whose value should be used as index of
 the query result array. Defaults to null, meaning the result array will be
 zero-based integers.

<join>					*CDbCriteria::join*
 (string) how to join with other tables. This refers to the JOIN clause in an
 SQL statement. For example, ''LEFT JOIN users ON users.id=authorID''.

<limit> 				*CDbCriteria::limit*
 (integer) maximum number of records to be returned. If less than 0, it means
 no limit.

<offset>				*CDbCriteria::offset*
 (integer) zero-based offset from where the records are to be returned. If
 less than 0, it means starting from the beginning.

<order> 				*CDbCriteria::order*
 (string) how to sort the query results. This refers to the ORDER BY clause in
 an SQL statement.

<paramCount>				*CDbCriteria::paramCount*
 (integer) the global counter for anonymous binding parameters. This counter
 is used for generating the name for the anonymous parameters.

<params>				*CDbCriteria::params*
 (array) list of query parameter values indexed by parameter placeholders. For
 example, 'array(':name'=>'Dan', ':age'=>31)'.

<scopes>				*CDbCriteria::scopes*
 (mixed) scopes to apply

 This property is effective only when passing criteria to the one of the
 following methods:
   |CActiveRecord::find|
   |CActiveRecord::findAll|
   |CActiveRecord::findByPk|
   |CActiveRecord::findAllByPk|
   |CActiveRecord::findByAttributes|
   |CActiveRecord::findAllByAttributes|
   |CActiveRecord::count|Can be set to one of the following:
   One scope: $criteria->scopes='scopeName';
   Multiple scopes:
   $criteria->scopes=array('scopeName1','scopeName2');
   Scope with parameters:
   $criteria->scopes=array('scopeName'=>array($params));
   Multiple scopes with parameters:
  
 $criteria->scopes=array('scopeName1'=>array($params1),'scopeName2'=>array($params2));
   Multiple scopes with the same name:
  
 array(array('scopeName'=>array($params1)),array('scopeName'=>array($params2)));

<select>				*CDbCriteria::select*
 (mixed) the columns being selected. This refers to the SELECT clause in an
 SQL statement. The property can be either a string (column names separated by
 commas) or an array of column names. Defaults to '*', meaning all columns.

<together>				*CDbCriteria::together*
 (boolean) whether the foreign tables should be joined with the primary table
 in a single SQL. This property is only used in relational AR queries for
 HAS_MANY and MANY_MANY relations.

 When this property is set true, only a single SQL will be executed for a
 relational AR query, even if the primary table is limited and the
 relationship between a foreign table and the primary table is many-to-one.

 When this property is set false, a SQL statement will be executed for each
 HAS_MANY relation.

 When this property is not set, if the primary table is limited or paginated,
 a SQL statement will be executed for each HAS_MANY relation. Otherwise, a
 single SQL statement will be executed for all.

<with>					*CDbCriteria::with*
 (mixed) the relational query criteria. This is used for fetching related
 objects in eager loading fashion. This property is effective only when the
 criteria is passed as a parameter to the following methods of CActiveRecord:
   |CActiveRecord::find|
   |CActiveRecord::findAll|
   |CActiveRecord::findByPk|
   |CActiveRecord::findAllByPk|
   |CActiveRecord::findByAttributes|
   |CActiveRecord::findAllByAttributes|
   |CActiveRecord::count|The property value will be used as the parameter to
 the |CActiveRecord::with| method to perform the eager loading. Please refer
 to |CActiveRecord::with| on how to specify this parameter.



METHOD DETAILS
------------------------------------------------------------------------------

*CDbCriteria::__construct*					 public
>
 __construct($data=array())
<
(void)

 Constructor.
    [data] (array) criteria initial property values (indexed by property name)


*CDbCriteria::__wakeup* 					 public
>
 __wakeup()
<
(void)

 Remaps criteria parameters on unserialize to prevent name collisions.


*CDbCriteria::addBetweenCondition*				 public
>
 addBetweenCondition($column, $valueStart, $valueEnd, $operator='AND')
<
(CDbCriteria) the criteria object itself

 Adds a between condition to the |CDbCriteria::condition| property.

 The new between condition and the existing condition will be concatenated via
 the specified operator which defaults to 'AND'. If one or both values are
 empty then the condition is not added to the existing condition. This method
 handles the case when the existing condition is empty. After calling this
 method, the |CDbCriteria::condition| property will be modified.
    [column] (string) the name of the column to search between.
    [valueStart] (string) the beginning value to start the between search.
    [valueEnd] (string) the ending value to end the between search.
    [operator] (string) the operator used to concatenate the new condition
    with the existing one. Defaults to 'AND'.


*CDbCriteria::addColumnCondition*				 public
>
 addColumnCondition($columns, $columnOperator='AND', $operator='AND')
<
(CDbCriteria) the criteria object itself

 Appends a condition for matching the given list of column values. The
 generated condition will be concatenated to the existing
 |CDbCriteria::condition| via the specified operator which defaults to 'AND'.
 The condition is generated by matching each column and the corresponding
 value.
    [columns] (array) list of column names and values to be matched
    (name=>value)
    [columnOperator] (string) the operator to concatenate multiple column
    matching condition. Defaults to 'AND'.
    [operator] (string) the operator used to concatenate the new condition
    with the existing one. Defaults to 'AND'.


*CDbCriteria::addCondition*					 public
>
 addCondition($condition, $operator='AND')
<
(CDbCriteria) the criteria object itself

 Appends a condition to the existing |CDbCriteria::condition|. The new
 condition and the existing condition will be concatenated via the specified
 operator which defaults to 'AND'. The new condition can also be an array. In
 this case, all elements in the array will be concatenated together via the
 operator. This method handles the case when the existing condition is empty.
 After calling this method, the |CDbCriteria::condition| property will be
 modified.
    [condition] (mixed) the new condition. It can be either a string or an
    array of strings.
    [operator] (string) the operator to join different conditions. Defaults to
    'AND'.


*CDbCriteria::addInCondition*					 public
>
 addInCondition($column, $values, $operator='AND')
<
(CDbCriteria) the criteria object itself

 Appends an IN condition to the existing |CDbCriteria::condition|. The IN
 condition and the existing condition will be concatenated via the specified
 operator which defaults to 'AND'. The IN condition is generated by using the
 SQL IN operator which requires the specified column value to be among the
 given list of values.
    [column] (string) the column name (or a valid SQL expression)
    [values] (array) list of values that the column value should be in
    [operator] (string) the operator used to concatenate the new condition
    with the existing one. Defaults to 'AND'.


*CDbCriteria::addNotInCondition*				 public
>
 addNotInCondition($column, $values, $operator='AND')
<
(CDbCriteria) the criteria object itself

 Appends an NOT IN condition to the existing |CDbCriteria::condition|. The NOT
 IN condition and the existing condition will be concatenated via the
 specified operator which defaults to 'AND'. The NOT IN condition is generated
 by using the SQL NOT IN operator which requires the specified column value to
 be among the given list of values.
    [column] (string) the column name (or a valid SQL expression)
    [values] (array) list of values that the column value should not be in
    [operator] (string) the operator used to concatenate the new condition
    with the existing one. Defaults to 'AND'.


*CDbCriteria::addSearchCondition*				 public
>
 addSearchCondition($column, $keyword, $escape=true, $operator='AND', $like='LIKE')
<
(CDbCriteria) the criteria object itself

 Appends a search condition to the existing |CDbCriteria::condition|. The
 search condition and the existing condition will be concatenated via the
 specified operator which defaults to 'AND'. The search condition is generated
 using the SQL LIKE operator with the given column name and search keyword.
    [column] (string) the column name (or a valid SQL expression)
    [keyword] (string) the search keyword. This interpretation of the keyword
    is affected by the next parameter.
    [escape] (boolean) whether the keyword should be escaped if it contains
    characters % or _. When this parameter is true (default), the special
    characters % (matches 0 or more characters) and _ (matches a single
    character) will be escaped, and the keyword will be surrounded with a %
    character on both ends. When this parameter is false, the keyword will be
    directly used for matching without any change.
    [operator] (string) the operator used to concatenate the new condition
    with the existing one. Defaults to 'AND'.
    [like] (string) the LIKE operator. Defaults to 'LIKE'. You may also set
    this to be 'NOT LIKE'.


*CDbCriteria::compare*						 public
>
 compare($column, $value, $partialMatch=false, $operator='AND', $escape=true)
<
(CDbCriteria) the criteria object itself

 Adds a comparison expression to the |CDbCriteria::condition| property.

 This method is a helper that appends to the |CDbCriteria::condition| property
 with a new comparison expression. The comparison is done by comparing a
 column with the given value using some comparison operator.

 The comparison operator is intelligently determined based on the first few
 characters in the given value. In particular, it recognizes the following
 operators if they appear as the leading characters in the given value:
   '&lt;': the column must be less than the given value.
   '&gt;': the column must be greater than the given value.
   '&lt;=': the column must be less than or equal to the given value.
   '&gt;=': the column must be greater than or equal to the given
   value.
   '&lt;&gt;': the column must not be the same as the given value.
   Note that when $partialMatch is true, this would mean the value
   must not be a substring of the column.
   '=': the column must be equal to the given value.
   none of the above: the column must be equal to the given value.
   Note that when $partialMatch is true, this would mean the value
   must be the same as the given value or be a substring of it.Note that any
 surrounding white spaces will be removed from the value before comparison.
 When the value is empty, no comparison expression will be added to the search
 condition.
    [column] (string) the name of the column to be searched
    [value] (mixed) the column value to be compared with. If the value is a
    string, the aforementioned intelligent comparison will be conducted. If
    the value is an array, the comparison is done by exact match of any of the
    value in the array. If the string or the array is empty, the existing
    search condition will not be modified.
    [partialMatch] (boolean) whether the value should consider partial text
    match (using LIKE and NOT LIKE operators). Defaults to false, meaning
    exact comparison.
    [operator] (string) the operator used to concatenate the new condition
    with the existing one. Defaults to 'AND'.
    [escape] (boolean) whether the value should be escaped if $partialMatch is
    true and the value contains characters % or _. When this parameter is true
    (default), the special characters % (matches 0 or more characters) and _
    (matches a single character) will be escaped, and the value will be
    surrounded with a % character on both ends. When this parameter is false,
    the value will be directly used for matching without any change.


*CDbCriteria::mergeWith*					 public
>
 mergeWith($criteria, $useAnd=true)
<
(void)

 Merges with another criteria. In general, the merging makes the resulting
 criteria more restrictive. For example, if both criterias have conditions,
 they will be 'AND' together. Also, the criteria passed as the parameter takes
 precedence in case two options cannot be merged (e.g. LIMIT, OFFSET).
    [criteria] (mixed) the criteria to be merged with. Either an array or
    CDbCriteria.
    [useAnd] (boolean) whether to use 'AND' to merge condition and having
    options. If false, 'OR' will be used instead. Defaults to 'AND'.


*CDbCriteria::toArray*						 public
>
 toArray()
<
(array) the array representation of the criteria




 vim:tw=78:ts=8:ft=help:norl:

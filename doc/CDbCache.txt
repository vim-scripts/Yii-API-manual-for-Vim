
*CDbCache*   >> |CCache| >> |CApplicationComponent| >> |CComponent|
==========

 CDbCache implements a cache application component by storing cached data in a
 database.

 CDbCache stores cache data in a DB table named |CDbCache::cacheTableName|. If
 the table does not exist, it will be automatically created. By setting
 |CDbCache::autoCreateCacheTable| to false, you can also manually create the
 DB table.

 CDbCache relies on 'PDO' to access database. By default, it will use a
 SQLite3 database under the application runtime directory. You can also
 specify |CDbCache::connectionID| so that it makes use of a DB application
 component to access database.

 See |CCache| manual for common cache operations that are supported by
 CDbCache.


PROPERTY DETAILS
------------------------------------------------------------------------------

<autoCreateCacheTable>			*CDbCache::autoCreateCacheTable*
 (boolean) whether the cache DB table should be created automatically if it
 does not exist. Defaults to true. If you already have the table created, it
 is recommended you set this property to be false to improve performance.

<cacheTableName>			*CDbCache::cacheTableName*
 (string) name of the DB table to store cache content. Defaults to 'YiiCache'.
 Note, if |CDbCache::autoCreateCacheTable| is false and you want to create the
 DB table manually by yourself, you need to make sure the DB table is of the
 following structure:
>
 (id CHAR(128) PRIMARY KEY, expire INTEGER, value BLOB)
<
 Note, some DBMS might not support BLOB type. In this case, replace 'BLOB'
 with a suitable binary data type (e.g. LONGBLOB in MySQL, BYTEA in
 PostgreSQL.)

<connectionID>				*CDbCache::connectionID*
 (string) the ID of the |CDbConnection| application component. If not set, a
 SQLite3 database will be automatically created and used. The SQLite database
 file is 'protected/runtime/cache-YiiVersion.db'.

<dbConnection>				*CDbCache::dbConnection*
 (CDbConnection) the DB connection instance

<gCProbability> 			*CDbCache::gCProbability*
 (integer) the probability (parts per million) that garbage collection (GC)
 should be performed when storing a piece of data in the cache. Defaults to
 100, meaning 0.01% chance.



METHOD DETAILS
------------------------------------------------------------------------------

*CDbCache::addValue*						 protected
>
 addValue($key, $value, $expire)
<
(boolean) true if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key into cache if the cache does not contain
 this key. This is the implementation of the method declared in the parent
 class.
    [key] (string) the key identifying the value to be cached
    [value] (string) the value to be cached
    [expire] (integer) the number of seconds in which the cached value will
    expire. 0 means never expire.


*CDbCache::createCacheTable*					 protected
>
 createCacheTable($db, $tableName)
<
(void)

 Creates the cache DB table.
    [db] (CDbConnection) the database connection
    [tableName] (string) the name of the table to be created


*CDbCache::deleteValue* 					 protected
>
 deleteValue($key)
<
(boolean) if no error happens during deletion

 Deletes a value with the specified key from cache This is the implementation
 of the method declared in the parent class.
    [key] (string) the key of the value to be deleted


*CDbCache::flushValues* 					 protected
>
 flushValues()
<
(boolean) whether the flush operation was successful.

 Deletes all values from cache. This is the implementation of the method
 declared in the parent class.


*CDbCache::gc*							 protected
>
 gc()
<
(void)

 Removes the expired data values.


*CDbCache::getDbConnection*					 public
>
 getDbConnection()
<
(CDbConnection) the DB connection instance



*CDbCache::getGCProbability*					 public
>
 getGCProbability()
<
(integer) the probability (parts per million) that garbage collection (GC)
should be performed when storing a piece of data in the cache. Defaults to
100, meaning 0.01% chance.



*CDbCache::getValue*						 protected
>
 getValue($key)
<
(string) the value stored in cache, false if the value is not in the cache or
expired.

 Retrieves a value from cache with a specified key. This is the implementation
 of the method declared in the parent class.
    [key] (string) a unique key identifying the cached value


*CDbCache::getValues*						 protected
>
 getValues($keys)
<
(array) a list of cached values indexed by the keys

 Retrieves multiple values from cache with the specified keys.
    [keys] (array) a list of keys identifying the cached values


*CDbCache::init*						 public
>
 init()
<
(void)

 Initializes this application component.

 This method is required by the |IApplicationComponent| interface. It ensures
 the existence of the cache DB table. It also removes expired data items from
 the cache.


*CDbCache::setDbConnection*					 public
>
 setDbConnection($value)
<
(void)

 Sets the DB connection used by the cache component.
    [value] (CDbConnection) the DB connection instance


*CDbCache::setGCProbability*					 public
>
 setGCProbability($value)
<
(void)

    [value] (integer) the probability (parts per million) that garbage
    collection (GC) should be performed when storing a piece of data in the
    cache. Defaults to 100, meaning 0.01% chance. This number should be
    between 0 and 1000000. A value 0 meaning no GC will be performed at all.


*CDbCache::setValue*						 protected
>
 setValue($key, $value, $expire)
<
(boolean) true if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key in cache. This is the implementation of
 the method declared in the parent class.
    [key] (string) the key identifying the value to be cached
    [value] (string) the value to be cached
    [expire] (integer) the number of seconds in which the cached value will
    expire. 0 means never expire.



 vim:tw=78:ts=8:ft=help:norl:

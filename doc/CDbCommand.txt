
*CDbCommand*   >> |CComponent|
============

 CDbCommand represents an SQL statement to execute against a database.

 It is usually created by calling |CDbConnection::createCommand|. The SQL
 statement to be executed may be set via |CDbCommand::setText|.

 To execute a non-query SQL (such as insert, delete, update), call
 |CDbCommand::execute|. To execute an SQL statement that returns result data
 set (such as SELECT), use |CDbCommand::query| or its convenient versions
 |CDbCommand::queryRow|, |CDbCommand::queryColumn|, or
 |CDbCommand::queryScalar|.

 If an SQL statement returns results (such as a SELECT SQL), the results can
 be accessed via the returned |CDbDataReader|.

 CDbCommand supports SQL statment preparation and parameter binding. Call
 |CDbCommand::bindParam| to bind a PHP variable to a parameter in SQL. Call
 |CDbCommand::bindValue| to bind a value to an SQL parameter. When binding a
 parameter, the SQL statement is automatically prepared. You may also call
 |CDbCommand::prepare| to explicitly prepare an SQL statement.

 Starting from version 1.1.6, CDbCommand can also be used as a query builder
 that builds a SQL statement from code fragments. For example,
>
 $user = Yii::app()->db->createCommand()
     ->select('username, password')
     ->from('tbl_user')
     ->where('id=:id', array(':id'=>1))
     ->queryRow();
<


PROPERTY DETAILS
------------------------------------------------------------------------------

<connection>				*CDbCommand::connection*
 (CDbConnection) the connection associated with this command

<distinct>				*CDbCommand::distinct*
 (boolean) Returns a value indicating whether SELECT DISTINCT should be used.

<from>					*CDbCommand::from*
 (string) Returns the FROM part in the query.

<group> 				*CDbCommand::group*
 (string) Returns the GROUP BY part in the query.

<having>				*CDbCommand::having*
 (string) Returns the HAVING part in the query.

<join>					*CDbCommand::join*
 (mixed) Returns the join part in the query.

<limit> 				*CDbCommand::limit*
 (string) Returns the LIMIT part in the query.

<offset>				*CDbCommand::offset*
 (string) Returns the OFFSET part in the query.

<order> 				*CDbCommand::order*
 (string) Returns the ORDER BY part in the query.

<params>				*CDbCommand::params*
 (array) the parameters (name=>value) to be bound to the current query.

<pdoStatement>				*CDbCommand::pdoStatement*
 (PDOStatement) the underlying PDOStatement for this command It could be null
 if the statement is not prepared yet.

<select>				*CDbCommand::select*
 (string) Returns the SELECT part in the query.

<text>					*CDbCommand::text*
 (string) the SQL statement to be executed

<union> 				*CDbCommand::union*
 (mixed) Returns the UNION part in the query.

<where> 				*CDbCommand::where*
 (string) Returns the WHERE part in the query.



METHOD DETAILS
------------------------------------------------------------------------------

*CDbCommand::__construct*					 public
>
 __construct($connection, $query=NULL)
<
(void)

 Constructor.
    [connection] (CDbConnection) the database connection
    [query] (mixed) the DB query to be executed. This can be either a string
    representing a SQL statement, or an array whose name-value pairs will be
    used to set the corresponding properties of the created command object.

    For example, you can pass in either ''SELECT * FROM tbl_user'' or
    'array('select'=>'*', 'from'=>'tbl_user')'. They are equivalent in terms
    of the final query result.

    When passing the query as an array, the following properties are commonly
    set: |CDbCommand::select|, |CDbCommand::distinct|, |CDbCommand::from|,
    |CDbCommand::where|, |CDbCommand::join|, |CDbCommand::group|,
    |CDbCommand::having|, |CDbCommand::order|, |CDbCommand::limit|,
    |CDbCommand::offset| and |CDbCommand::union|. Please refer to the setter
    of each of these properties for details about valid property values. This
    feature has been available since version 1.1.6.

    Since 1.1.7 it is possible to use a specific mode of data fetching by
    setting |CDbCommand::setFetchMode|. See
    'http://www.php.net/manual/en/function.PDOStatement-setFetchMode.php' for
    more details.


*CDbCommand::__sleep*						 public
>
 __sleep()
<
(array) 

 Set the statement to null when serializing.


*CDbCommand::addColumn* 					 public
>
 addColumn($table, $column, $type)
<
(integer) number of rows affected by the execution.

 Builds and executes a SQL statement for adding a new DB column.
    [table] (string) the table that the new column will be added to. The table
    name will be properly quoted by the method.
    [column] (string) the name of the new column. The name will be properly
    quoted by the method.
    [type] (string) the column type. The getColumnType method will be invoked
    to convert abstract column type (if any) into the physical one. Anything
    that is not recognized as abstract type will be kept in the generated SQL.
    For example, 'string' will be turned into 'varchar(255)', while 'string
    not null' will become 'varchar(255) not null'.


*CDbCommand::addForeignKey*					 public
>
 addForeignKey($name, $table, $columns, $refTable, $refColumns, $delete='', $update='')
<
(integer) number of rows affected by the execution.

 Builds a SQL statement for adding a foreign key constraint to an existing
 table. The method will properly quote the table and column names.
    [name] (string) the name of the foreign key constraint.
    [table] (string) the table that the foreign key constraint will be added
    to.
    [columns] (string) the name of the column to that the constraint will be
    added on. If there are multiple columns, separate them with commas.
    [refTable] (string) the table that the foreign key references to.
    [refColumns] (string) the name of the column that the foreign key
    references to. If there are multiple columns, separate them with commas.
    [delete] (string) the ON DELETE option. Most DBMS support these options:
    RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
    [update] (string) the ON UPDATE option. Most DBMS support these options:
    RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL


*CDbCommand::alterColumn*					 public
>
 alterColumn($table, $column, $type)
<
(integer) number of rows affected by the execution.

 Builds and executes a SQL statement for changing the definition of a column.
    [table] (string) the table whose column is to be changed. The table name
    will be properly quoted by the method.
    [column] (string) the name of the column to be changed. The name will be
    properly quoted by the method.
    [type] (string) the new column type. The getColumnType method will be
    invoked to convert abstract column type (if any) into the physical one.
    Anything that is not recognized as abstract type will be kept in the
    generated SQL. For example, 'string' will be turned into 'varchar(255)',
    while 'string not null' will become 'varchar(255) not null'.


*CDbCommand::bindParam* 					 public
>
 bindParam($name, $value, $dataType=, $length=, $driverOptions=NULL)
<
(CDbCommand) the current command being executed

 Binds a parameter to the SQL statement to be executed.
    [name] (mixed) Parameter identifier. For a prepared statement using named
    placeholders, this will be a parameter name of the form :name. For a
    prepared statement using question mark placeholders, this will be the
    1-indexed position of the parameter.
    [value] (mixed) Name of the PHP variable to bind to the SQL statement
    parameter
    [dataType] (integer) SQL data type of the parameter. If null, the type is
    determined by the PHP type of the value.
    [length] (integer) length of the data type
    [driverOptions] (mixed) the driver-specific options (this is available
    since version 1.1.6)


*CDbCommand::bindValue* 					 public
>
 bindValue($name, $value, $dataType=)
<
(CDbCommand) the current command being executed

 Binds a value to a parameter.
    [name] (mixed) Parameter identifier. For a prepared statement using named
    placeholders, this will be a parameter name of the form :name. For a
    prepared statement using question mark placeholders, this will be the
    1-indexed position of the parameter.
    [value] (mixed) The value to bind to the parameter
    [dataType] (integer) SQL data type of the parameter. If null, the type is
    determined by the PHP type of the value.


*CDbCommand::bindValues*					 public
>
 bindValues($values)
<
(CDbCommand) the current command being executed

 Binds a list of values to the corresponding parameters. This is similar to
 |CDbCommand::bindValue| except that it binds multiple values. Note that the
 SQL data type of each value is determined by its PHP type.
    [values] (array) the values to be bound. This must be given in terms of an
    associative array with array keys being the parameter names, and array
    values the corresponding parameter values. For example,
    'array(':name'=>'John', ':age'=>25)'.


*CDbCommand::buildQuery*					 public
>
 buildQuery($query)
<
(string) the SQL statement

 Builds a SQL SELECT statement from the given query specification.
    [query] (array) the query specification in name-value pairs. The following
    query options are supported: |CDbCommand::select|, |CDbCommand::distinct|,
    |CDbCommand::from|, |CDbCommand::where|, |CDbCommand::join|,
    |CDbCommand::group|, |CDbCommand::having|, |CDbCommand::order|,
    |CDbCommand::limit|, |CDbCommand::offset| and |CDbCommand::union|.


*CDbCommand::cancel*						 public
>
 cancel()
<
(void)

 Cancels the execution of the SQL statement.


*CDbCommand::createIndex*					 public
>
 createIndex($name, $table, $column, $unique=false)
<
(integer) number of rows affected by the execution.

 Builds and executes a SQL statement for creating a new index.
    [name] (string) the name of the index. The name will be properly quoted by
    the method.
    [table] (string) the table that the new index will be created for. The
    table name will be properly quoted by the method.
    [column] (string) the column(s) that should be included in the index. If
    there are multiple columns, please separate them by commas. The column
    names will be properly quoted by the method.
    [unique] (boolean) whether to add UNIQUE constraint on the created index.


*CDbCommand::createTable*					 public
>
 createTable($table, $columns, $options='')
<
(integer) number of rows affected by the execution.

 Builds and executes a SQL statement for creating a new DB table.

 The columns in the new  table should be specified as name-definition pairs
 (e.g. 'name'=>'string'), where name stands for a column name which will be
 properly quoted by the method, and definition stands for the column type
 which can contain an abstract DB type. The getColumnType method will be
 invoked to convert any abstract type into a physical one.

 If a column is specified with definition only (e.g. 'PRIMARY KEY (name,
 type)'), it will be directly inserted into the generated SQL.
    [table] (string) the name of the table to be created. The name will be
    properly quoted by the method.
    [columns] (array) the columns (name=>definition) in the new table.
    [options] (string) additional SQL fragment that will be appended to the
    generated SQL.


*CDbCommand::crossJoin* 					 public
>
 crossJoin($table)
<
(CDbCommand) the command object itself

 Appends a CROSS JOIN part to the query. Note that not all DBMS support CROSS
 JOIN.
    [table] (string) the table to be joined. Table name can contain schema
    prefix (e.g. 'public.tbl_user') and/or table alias (e.g. 'tbl_user u').
    The method will automatically quote the table name unless it contains some
    parenthesis (which means the table is given as a sub-query or DB
    expression).


*CDbCommand::delete*						 public
>
 delete($table, $conditions='', $params=array())
<
(integer) number of rows affected by the execution.

 Creates and executes a DELETE SQL statement.
    [table] (string) the table where the data will be deleted from.
    [conditions] (mixed) the conditions that will be put in the WHERE part.
    Please refer to |CDbCommand::where| on how to specify conditions.
    [params] (array) the parameters to be bound to the query.


*CDbCommand::dropColumn*					 public
>
 dropColumn($table, $column)
<
(integer) number of rows affected by the execution.

 Builds and executes a SQL statement for dropping a DB column.
    [table] (string) the table whose column is to be dropped. The name will be
    properly quoted by the method.
    [column] (string) the name of the column to be dropped. The name will be
    properly quoted by the method.


*CDbCommand::dropForeignKey*					 public
>
 dropForeignKey($name, $table)
<
(integer) number of rows affected by the execution.

 Builds a SQL statement for dropping a foreign key constraint.
    [name] (string) the name of the foreign key constraint to be dropped. The
    name will be properly quoted by the method.
    [table] (string) the table whose foreign is to be dropped. The name will
    be properly quoted by the method.


*CDbCommand::dropIndex* 					 public
>
 dropIndex($name, $table)
<
(integer) number of rows affected by the execution.

 Builds and executes a SQL statement for dropping an index.
    [name] (string) the name of the index to be dropped. The name will be
    properly quoted by the method.
    [table] (string) the table whose index is to be dropped. The name will be
    properly quoted by the method.


*CDbCommand::dropTable* 					 public
>
 dropTable($table)
<
(integer) number of rows affected by the execution.

 Builds and executes a SQL statement for dropping a DB table.
    [table] (string) the table to be dropped. The name will be properly quoted
    by the method.


*CDbCommand::execute*						 public
>
 execute($params=array())
<
(integer) number of rows affected by the execution.

 Executes the SQL statement. This method is meant only for executing non-query
 SQL statement. No result set will be returned.
    [params] (array) input parameters (name=>value) for the SQL execution.
    This is an alternative to |CDbCommand::bindParam| and
    |CDbCommand::bindValue|. If you have multiple input parameters, passing
    them in this way can improve the performance. Note that if you pass
    parameters in this way, you cannot bind parameters or values using
    |CDbCommand::bindParam| or |CDbCommand::bindValue|, and vice versa.
    binding methods and  the input parameters this way can improve the
    performance.


*CDbCommand::from*						 public
>
 from($tables)
<
(CDbCommand) the command object itself

 Sets the FROM part of the query.
    [tables] (mixed) the table(s) to be selected from. This can be either a
    string (e.g. 'tbl_user') or an array (e.g. array('tbl_user',
    'tbl_profile')) specifying one or several table names. Table names can
    contain schema prefixes (e.g. 'public.tbl_user') and/or table aliases
    (e.g. 'tbl_user u'). The method will automatically quote the table names
    unless it contains some parenthesis (which means the table is given as a
    sub-query or DB expression).


*CDbCommand::getConnection*					 public
>
 getConnection()
<
(CDbConnection) the connection associated with this command



*CDbCommand::getDistinct*					 public
>
 getDistinct()
<
(boolean) a value indicating whether SELECT DISTINCT should be used.

 Returns a value indicating whether SELECT DISTINCT should be used.


*CDbCommand::getFrom*						 public
>
 getFrom()
<
(string) the FROM part (without 'FROM' ) in the query.

 Returns the FROM part in the query.


*CDbCommand::getGroup*						 public
>
 getGroup()
<
(string) the GROUP BY part (without 'GROUP BY' ) in the query.

 Returns the GROUP BY part in the query.


*CDbCommand::getHaving* 					 public
>
 getHaving()
<
(string) the HAVING part (without 'HAVING' ) in the query.

 Returns the HAVING part in the query.


*CDbCommand::getJoin*						 public
>
 getJoin()
<
(mixed) the join part in the query. This can be an array representing multiple
join fragments, or a string representing a single jojin fragment. Each join
fragment will contain the proper join operator (e.g. LEFT JOIN).

 Returns the join part in the query.


*CDbCommand::getLimit*						 public
>
 getLimit()
<
(string) the LIMIT part (without 'LIMIT' ) in the query.

 Returns the LIMIT part in the query.


*CDbCommand::getOffset* 					 public
>
 getOffset()
<
(string) the OFFSET part (without 'OFFSET' ) in the query.

 Returns the OFFSET part in the query.


*CDbCommand::getOrder*						 public
>
 getOrder()
<
(string) the ORDER BY part (without 'ORDER BY' ) in the query.

 Returns the ORDER BY part in the query.


*CDbCommand::getPdoStatement*					 public
>
 getPdoStatement()
<
(PDOStatement) the underlying PDOStatement for this command It could be null
if the statement is not prepared yet.



*CDbCommand::getSelect* 					 public
>
 getSelect()
<
(string) the SELECT part (without 'SELECT') in the query.

 Returns the SELECT part in the query.


*CDbCommand::getText*						 public
>
 getText()
<
(string) the SQL statement to be executed



*CDbCommand::getUnion*						 public
>
 getUnion()
<
(mixed) the UNION part (without 'UNION' ) in the query. This can be either a
string or an array representing multiple union parts.

 Returns the UNION part in the query.


*CDbCommand::getWhere*						 public
>
 getWhere()
<
(string) the WHERE part (without 'WHERE' ) in the query.

 Returns the WHERE part in the query.


*CDbCommand::group*						 public
>
 group($columns)
<
(CDbCommand) the command object itself

 Sets the GROUP BY part of the query.
    [columns] (mixed) the columns to be grouped by. Columns can be specified
    in either a string (e.g. "id, name") or an array (e.g. array('id',
    'name')). The method will automatically quote the column names unless a
    column contains some parenthesis (which means the column contains a DB
    expression).


*CDbCommand::having*						 public
>
 having($conditions, $params=array())
<
(CDbCommand) the command object itself

 Sets the HAVING part of the query.
    [conditions] (mixed) the conditions to be put after HAVING. Please refer
    to |CDbCommand::where| on how to specify conditions.
    [params] (array) the parameters (name=>value) to be bound to the query


*CDbCommand::insert*						 public
>
 insert($table, $columns)
<
(integer) number of rows affected by the execution.

 Creates and executes an INSERT SQL statement. The method will properly escape
 the column names, and bind the values to be inserted.
    [table] (string) the table that new rows will be inserted into.
    [columns] (array) the column data (name=>value) to be inserted into the
    table.


*CDbCommand::join*						 public
>
 join($table, $conditions, $params=array())
<
(CDbCommand) the command object itself

 Appends an INNER JOIN part to the query.
    [table] (string) the table to be joined. Table name can contain schema
    prefix (e.g. 'public.tbl_user') and/or table alias (e.g. 'tbl_user u').
    The method will automatically quote the table name unless it contains some
    parenthesis (which means the table is given as a sub-query or DB
    expression).
    [conditions] (mixed) the join condition that should appear in the ON part.
    Please refer to |CDbCommand::where| on how to specify conditions.
    [params] (array) the parameters (name=>value) to be bound to the query


*CDbCommand::leftJoin*						 public
>
 leftJoin($table, $conditions, $params=array())
<
(CDbCommand) the command object itself

 Appends a LEFT OUTER JOIN part to the query.
    [table] (string) the table to be joined. Table name can contain schema
    prefix (e.g. 'public.tbl_user') and/or table alias (e.g. 'tbl_user u').
    The method will automatically quote the table name unless it contains some
    parenthesis (which means the table is given as a sub-query or DB
    expression).
    [conditions] (mixed) the join condition that should appear in the ON part.
    Please refer to |CDbCommand::where| on how to specify conditions.
    [params] (array) the parameters (name=>value) to be bound to the query


*CDbCommand::limit*						 public
>
 limit($limit, $offset=)
<
(CDbCommand) the command object itself

 Sets the LIMIT part of the query.
    [limit] (integer) the limit
    [offset] (integer) the offset


*CDbCommand::naturalJoin*					 public
>
 naturalJoin($table)
<
(CDbCommand) the command object itself

 Appends a NATURAL JOIN part to the query. Note that not all DBMS support
 NATURAL JOIN.
    [table] (string) the table to be joined. Table name can contain schema
    prefix (e.g. 'public.tbl_user') and/or table alias (e.g. 'tbl_user u').
    The method will automatically quote the table name unless it contains some
    parenthesis (which means the table is given as a sub-query or DB
    expression).


*CDbCommand::offset*						 public
>
 offset($offset)
<
(CDbCommand) the command object itself

 Sets the OFFSET part of the query.
    [offset] (integer) the offset


*CDbCommand::order*						 public
>
 order($columns)
<
(CDbCommand) the command object itself

 Sets the ORDER BY part of the query.
    [columns] (mixed) the columns (and the directions) to be ordered by.
    Columns can be specified in either a string (e.g. "id ASC, name DESC") or
    an array (e.g. array('id ASC', 'name DESC')). The method will
    automatically quote the column names unless a column contains some
    parenthesis (which means the column contains a DB expression).


*CDbCommand::prepare*						 public
>
 prepare()
<
(void)

 Prepares the SQL statement to be executed. For complex SQL statement that is
 to be executed multiple times, this may improve performance. For SQL
 statement with binding parameters, this method is invoked automatically.


*CDbCommand::query*						 public
>
 query($params=array())
<
(CDbDataReader) the reader object for fetching the query result

 Executes the SQL statement and returns query result. This method is for
 executing an SQL query that returns result set.
    [params] (array) input parameters (name=>value) for the SQL execution.
    This is an alternative to |CDbCommand::bindParam| and
    |CDbCommand::bindValue|. If you have multiple input parameters, passing
    them in this way can improve the performance. Note that if you pass
    parameters in this way, you cannot bind parameters or values using
    |CDbCommand::bindParam| or |CDbCommand::bindValue|, and vice versa.
    binding methods and  the input parameters this way can improve the
    performance.


*CDbCommand::queryAll*						 public
>
 queryAll($fetchAssociative=true, $params=array())
<
(array) all rows of the query result. Each array element is an array
representing a row. An empty array is returned if the query results in
nothing.

 Executes the SQL statement and returns all rows.
    [fetchAssociative] (boolean) whether each row should be returned as an
    associated array with column names as the keys or the array keys are
    column indexes (0-based).
    [params] (array) input parameters (name=>value) for the SQL execution.
    This is an alternative to |CDbCommand::bindParam| and
    |CDbCommand::bindValue|. If you have multiple input parameters, passing
    them in this way can improve the performance. Note that if you pass
    parameters in this way, you cannot bind parameters or values using
    |CDbCommand::bindParam| or |CDbCommand::bindValue|, and vice versa.
    binding methods and  the input parameters this way can improve the
    performance.


*CDbCommand::queryColumn*					 public
>
 queryColumn($params=array())
<
(array) the first column of the query result. Empty array if no result.

 Executes the SQL statement and returns the first column of the result. This
 is a convenient method of |CDbCommand::query| when only the first column of
 data is needed. Note, the column returned will contain the first element in
 each row of result.
    [params] (array) input parameters (name=>value) for the SQL execution.
    This is an alternative to |CDbCommand::bindParam| and
    |CDbCommand::bindValue|. If you have multiple input parameters, passing
    them in this way can improve the performance. Note that if you pass
    parameters in this way, you cannot bind parameters or values using
    |CDbCommand::bindParam| or |CDbCommand::bindValue|, and vice versa.
    binding methods and  the input parameters this way can improve the
    performance.


*CDbCommand::queryRow*						 public
>
 queryRow($fetchAssociative=true, $params=array())
<
(mixed) the first row (in terms of an array) of the query result, false if no
result.

 Executes the SQL statement and returns the first row of the result. This is a
 convenient method of |CDbCommand::query| when only the first row of data is
 needed.
    [fetchAssociative] (boolean) whether the row should be returned as an
    associated array with column names as the keys or the array keys are
    column indexes (0-based).
    [params] (array) input parameters (name=>value) for the SQL execution.
    This is an alternative to |CDbCommand::bindParam| and
    |CDbCommand::bindValue|. If you have multiple input parameters, passing
    them in this way can improve the performance. Note that if you pass
    parameters in this way, you cannot bind parameters or values using
    |CDbCommand::bindParam| or |CDbCommand::bindValue|, and vice versa.
    binding methods and  the input parameters this way can improve the
    performance.


*CDbCommand::queryScalar*					 public
>
 queryScalar($params=array())
<
(mixed) the value of the first column in the first row of the query result.
False is returned if there is no value.

 Executes the SQL statement and returns the value of the first column in the
 first row of data. This is a convenient method of |CDbCommand::query| when
 only a single scalar value is needed (e.g. obtaining the count of the
 records).
    [params] (array) input parameters (name=>value) for the SQL execution.
    This is an alternative to |CDbCommand::bindParam| and
    |CDbCommand::bindValue|. If you have multiple input parameters, passing
    them in this way can improve the performance. Note that if you pass
    parameters in this way, you cannot bind parameters or values using
    |CDbCommand::bindParam| or |CDbCommand::bindValue|, and vice versa.
    binding methods and  the input parameters this way can improve the
    performance.


*CDbCommand::renameColumn*					 public
>
 renameColumn($table, $name, $newName)
<
(integer) number of rows affected by the execution.

 Builds and executes a SQL statement for renaming a column.
    [table] (string) the table whose column is to be renamed. The name will be
    properly quoted by the method.
    [name] (string) the old name of the column. The name will be properly
    quoted by the method.
    [newName] (string) the new name of the column. The name will be properly
    quoted by the method.


*CDbCommand::renameTable*					 public
>
 renameTable($table, $newName)
<
(integer) number of rows affected by the execution.

 Builds and executes a SQL statement for renaming a DB table.
    [table] (string) the table to be renamed. The name will be properly quoted
    by the method.
    [newName] (string) the new table name. The name will be properly quoted by
    the method.


*CDbCommand::reset*						 public
>
 reset()
<
(CDbCommand) this command instance

 Cleans up the command and prepares for building a new query. This method is
 mainly used when a command object is being reused multiple times for building
 different queries. Calling this method will clean up all internal states of
 the command object.


*CDbCommand::rightJoin* 					 public
>
 rightJoin($table, $conditions, $params=array())
<
(CDbCommand) the command object itself

 Appends a RIGHT OUTER JOIN part to the query.
    [table] (string) the table to be joined. Table name can contain schema
    prefix (e.g. 'public.tbl_user') and/or table alias (e.g. 'tbl_user u').
    The method will automatically quote the table name unless it contains some
    parenthesis (which means the table is given as a sub-query or DB
    expression).
    [conditions] (mixed) the join condition that should appear in the ON part.
    Please refer to |CDbCommand::where| on how to specify conditions.
    [params] (array) the parameters (name=>value) to be bound to the query


*CDbCommand::select*						 public
>
 select($columns='*', $option='')
<
(CDbCommand) the command object itself

 Sets the SELECT part of the query.
    [columns] (mixed) the columns to be selected. Defaults to '*', meaning all
    columns. Columns can be specified in either a string (e.g. "id, name") or
    an array (e.g. array('id', 'name')). Columns can contain table prefixes
    (e.g. "tbl_user.id") and/or column aliases (e.g. "tbl_user.id AS
    user_id"). The method will automatically quote the column names unless a
    column contains some parenthesis (which means the column contains a DB
    expression).
    [option] (string) additional option that should be appended to the
    'SELECT' keyword. For example, in MySQL, the option 'SQL_CALC_FOUND_ROWS'
    can be used. This parameter is supported since version 1.1.8.


*CDbCommand::selectDistinct*					 public
>
 selectDistinct($columns='*')
<
(CDbCommand) the command object itself

 Sets the SELECT part of the query with the DISTINCT flag turned on. This is
 the same as |CDbCommand::select| except that the DISTINCT flag is turned on.
    [columns] (mixed) the columns to be selected. See |CDbCommand::select| for
    more details.


*CDbCommand::setDistinct*					 public
>
 setDistinct($value)
<
(void)

 Sets a value indicating whether SELECT DISTINCT should be used.
    [value] (boolean) a value indicating whether SELECT DISTINCT should be
    used.


*CDbCommand::setFetchMode*					 public
>
 setFetchMode($mode)
<
(CDbCommand) 

 Set the default fetch mode for this statement
    [mode] (mixed) fetch mode


*CDbCommand::setFrom*						 public
>
 setFrom($value)
<
(void)

 Sets the FROM part in the query.
    [value] (mixed) the tables to be selected from. Please refer to
    |CDbCommand::from| for details on how to specify this parameter.


*CDbCommand::setGroup*						 public
>
 setGroup($value)
<
(void)

 Sets the GROUP BY part in the query.
    [value] (mixed) the GROUP BY part. Please refer to |CDbCommand::group| for
    details on how to specify this parameter.


*CDbCommand::setHaving* 					 public
>
 setHaving($value)
<
(void)

 Sets the HAVING part in the query.
    [value] (mixed) the HAVING part. Please refer to |CDbCommand::having| for
    details on how to specify this parameter.


*CDbCommand::setJoin*						 public
>
 setJoin($value)
<
(void)

 Sets the join part in the query.
    [value] (mixed) the join part in the query. This can be either a string or
    an array representing multiple join parts in the query. Each part must
    contain the proper join operator (e.g. 'LEFT JOIN tbl_profile ON
    tbl_user.id=tbl_profile.id')


*CDbCommand::setLimit*						 public
>
 setLimit($value)
<
(void)

 Sets the LIMIT part in the query.
    [value] (integer) the LIMIT part. Please refer to |CDbCommand::limit| for
    details on how to specify this parameter.


*CDbCommand::setOffset* 					 public
>
 setOffset($value)
<
(void)

 Sets the OFFSET part in the query.
    [value] (integer) the OFFSET part. Please refer to |CDbCommand::offset|
    for details on how to specify this parameter.


*CDbCommand::setOrder*						 public
>
 setOrder($value)
<
(void)

 Sets the ORDER BY part in the query.
    [value] (mixed) the ORDER BY part. Please refer to |CDbCommand::order| for
    details on how to specify this parameter.


*CDbCommand::setSelect* 					 public
>
 setSelect($value)
<
(void)

 Sets the SELECT part in the query.
    [value] (mixed) the data to be selected. Please refer to
    |CDbCommand::select| for details on how to specify this parameter.


*CDbCommand::setText*						 public
>
 setText($value)
<
(CDbCommand) this command instance

 Specifies the SQL statement to be executed. Any previous execution will be
 terminated or cancel.
    [value] (string) the SQL statement to be executed


*CDbCommand::setUnion*						 public
>
 setUnion($value)
<
(void)

 Sets the UNION part in the query.
    [value] (mixed) the UNION part. This can be either a string or an array
    representing multiple SQL statements to be unioned together.


*CDbCommand::setWhere*						 public
>
 setWhere($value)
<
(void)

 Sets the WHERE part in the query.
    [value] (mixed) the where part. Please refer to |CDbCommand::where| for
    details on how to specify this parameter.


*CDbCommand::truncateTable*					 public
>
 truncateTable($table)
<
(integer) number of rows affected by the execution.

 Builds and executes a SQL statement for truncating a DB table.
    [table] (string) the table to be truncated. The name will be properly
    quoted by the method.


*CDbCommand::union*						 public
>
 union($sql)
<
(CDbCommand) the command object itself

 Appends a SQL statement using UNION operator.
    [sql] (string) the SQL statement to be appended using UNION


*CDbCommand::update*						 public
>
 update($table, $columns, $conditions='', $params=array())
<
(integer) number of rows affected by the execution.

 Creates and executes an UPDATE SQL statement. The method will properly escape
 the column names and bind the values to be updated.
    [table] (string) the table to be updated.
    [columns] (array) the column data (name=>value) to be updated.
    [conditions] (mixed) the conditions that will be put in the WHERE part.
    Please refer to |CDbCommand::where| on how to specify conditions.
    [params] (array) the parameters to be bound to the query.


*CDbCommand::where*						 public
>
 where($conditions, $params=array())
<
(CDbCommand) the command object itself

 Sets the WHERE part of the query.

 The method requires a $conditions parameter, and optionally a $params
 parameter specifying the values to be bound to the query.

 The $conditions parameter should be either a string (e.g. 'id=1') or an
 array. If the latter, it must be of the format 'array(operator, operand1,
 operand2, ...)', where the operator can be one of the followings, and the
 possible operands depend on the corresponding operator:
   'and': the operands should be concatenated together using AND. For
   example, array('and', 'id=1', 'id=2') will generate 'id=1 AND
   id=2'. If an operand is an array, it will be converted into a
   string using the same rules described here. For example,
   array('and', 'type=1', array('or', 'id=1', 'id=2')) will generate
   'type=1 AND (id=1 OR id=2)'. The method will NOT do any quoting or
   escaping.
   'or': similar as the 'and' operator except that the operands are
   concatenated using OR.
   'in': operand 1 should be a column or DB expression, and operand 2
   be an array representing the range of the values that the column
   or DB expression should be in. For example, array('in', 'id',
   array(1,2,3)) will generate 'id IN (1,2,3)'. The method will
   properly quote the column name and escape values in the range.
   'not in': similar as the 'in' operator except that IN is replaced
   with NOT IN in the generated condition.
   'like': operand 1 should be a column or DB expression, and operand
   2 be a string or an array representing the values that the column
   or DB expression should be like. For example, array('like',
   'name', '%tester%') will generate "name LIKE '%tester%'". When the
   value range is given as an array, multiple LIKE predicates will be
   generated and concatenated using AND. For example, array('like',
   'name', array('%test%', '%sample%')) will generate "name LIKE
   '%test%' AND name LIKE '%sample%'". The method will properly quote
   the column name and escape values in the range.
   'not like': similar as the 'like' operator except that LIKE is
   replaced with NOT LIKE in the generated condition.
   'or like': similar as the 'like' operator except that OR is used
   to concatenated the LIKE predicates.
   'or not like': similar as the 'not like' operator except that OR
   is used to concatenated the NOT LIKE predicates.
    [conditions] (mixed) the conditions that should be put in the WHERE part.
    [params] (array) the parameters (name=>value) to be bound to the query



 vim:tw=78:ts=8:ft=help:norl:

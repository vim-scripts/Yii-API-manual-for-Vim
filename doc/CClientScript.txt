
*CClientScript*   >> |CApplicationComponent| >> |CComponent|
===============

 CClientScript manages JavaScript and CSS stylesheets for views.


PROPERTY DETAILS
------------------------------------------------------------------------------

<corePackages>				*CClientScript::corePackages*
 (array) list of core script packages (name=>package spec). Please refer to
 |CClientScript::packages| for details about package spec.

 By default, the core script packages are specified in
 'framework/web/js/packages.php'. You may configure this property to customize
 the core script packages.

 When calling |CClientScript::registerPackage| to register a script package,
 |CClientScript::packages| will be checked first followed by this property. If
 a package is found, it will be registered for rendering later on.

<coreScriptPosition>			*CClientScript::coreScriptPosition*
 (integer) Where the scripts registered using
 |CClientScript::registerCoreScript| or |CClientScript::registerPackage| will
 be inserted in the page. This can be one of the CClientScript::POS_*
 constants. Defaults to CClientScript::POS_HEAD.

<coreScriptUrl> 			*CClientScript::coreScriptUrl*
 (string) Returns the base URL of all core javascript files. If the base URL
 is not explicitly set, this method will publish the whole directory
 'framework/web/js/source' and return the corresponding URL.

<coreScripts>				*CClientScript::coreScripts*
 (array) the registered script packages (name => package spec)

<css>					*CClientScript::css*
 (array) the registered css code blocks (key => array(CSS code, media type)).

<cssFiles>				*CClientScript::cssFiles*
 (array) the registered CSS files (CSS URL=>media type).

<enableJavaScript>			*CClientScript::enableJavaScript*
 (boolean) whether JavaScript should be enabled. Defaults to true.

<hasScripts>				*CClientScript::hasScripts*
 (boolean) whether there are any javascript or css to be rendered.

<linkTags>				*CClientScript::linkTags*
 (array) the registered head link tags. Each array element represents an
 option array that will be passed as the last parameter of |CHtml::linkTag|.

<metaTags>				*CClientScript::metaTags*
 (array) the registered head meta tags. Each array element represents an
 option array that will be passed as the last parameter of |CHtml::metaTag|.

<packages>				*CClientScript::packages*
 (array) list of custom script packages (name=>package spec). This property
 keeps a list of named script packages, each of which can contain a set of CSS
 and/or JavaScript script files, and their dependent package names. By calling
 |CClientScript::registerPackage|, one can register a whole package of client
 scripts together with their dependent packages and render them in the HTML
 output.

 The array structure is as follows:
>
 array(
   'package-name'=>array(
     'basePath'=>'alias of the directory containing the script files',
     'baseUrl'=>'base URL for the script files',
     'js'=>array(list of js files relative to basePath/baseUrl),
     'css'=>array(list of css files relative to basePath/baseUrl),
     'depends'=>array(list of dependent packages),
   ),
   ......
 )
<
 The JS and CSS files listed are relative to 'basePath'. For example, if
 'basePath' is 'application.assets', a script named 'comments.js' will refer
 to the file 'protected/assets/comments.js'.

 When a script is being rendered in HTML, it will be prefixed with 'baseUrl'.
 For example, if 'baseUrl' is '/assets', the 'comments.js' script will be
 rendered using URL '/assets/comments.js'.

 If 'baseUrl' does not start with '/', the relative URL of the application
 entry script will be inserted at the beginning. For example, if 'baseUrl' is
 'assets' and the current application runs with the URL
 'http://localhost/demo/index.php', then the 'comments.js' script will be
 rendered using URL '/demo/assets/comments.js'.

 If 'baseUrl' is not set, the script will be published by |CAssetManager| and
 the corresponding published URL will be used.

 When calling |CClientScript::registerPackage| to register a script package,
 this property will be checked first followed by
 |CClientScript::corePackages|. If a package is found, it will be registered
 for rendering later on.

<scriptFiles>				*CClientScript::scriptFiles*
 (array) the registered JavaScript files (position, key => URL)

<scriptMap>				*CClientScript::scriptMap*
 (array) the mapping between script file names and the corresponding script
 URLs. The array keys are script file names (without directory part) and the
 array values are the corresponding URLs. If an array value is false, the
 corresponding script file will not be rendered. If an array key is '*.js' or
 '*.css', the corresponding URL will replace all JavaScript files or CSS
 files, respectively.

 This property is mainly used to optimize the generated HTML pages by merging
 different scripts files into fewer and optimized script files.

<scripts>				*CClientScript::scripts*
 (array) the registered JavaScript code blocks (position, key => code)



METHOD DETAILS
------------------------------------------------------------------------------

*CClientScript::addPackage*					 public
>
 addPackage($name, $definition)
<
(void)

 Adds a package to packages list.
    [name] (string) the name of the script package.
    [definition] (array) the definition array of the script package,


*CClientScript::getCoreScriptUrl*				 public
>
 getCoreScriptUrl()
<
(string) the base URL of all core javascript files

 Returns the base URL of all core javascript files. If the base URL is not
 explicitly set, this method will publish the whole directory
 'framework/web/js/source' and return the corresponding URL.


*CClientScript::getPackageBaseUrl*				 public
>
 getPackageBaseUrl($name)
<
(string) the base URL for the named package. False is returned if the package
is not registered yet.

 Returns the base URL for a registered package with the specified name. If
 needed, this method may publish the assets of the package and returns the
 published base URL.
    [name] (string) the package name


*CClientScript::isCssFileRegistered*				 public
>
 isCssFileRegistered($url)
<
(boolean) whether the CSS file is already registered

 Checks whether the CSS file has been registered.
    [url] (string) URL of the CSS file


*CClientScript::isCssRegistered*				 public
>
 isCssRegistered($id)
<
(boolean) whether the CSS code is already registered

 Checks whether the CSS code has been registered.
    [id] (string) ID that uniquely identifies the CSS code


*CClientScript::isScriptFileRegistered* 			 public
>
 isScriptFileRegistered($url, $position=0)
<
(boolean) whether the javascript file is already registered

 Checks whether the JavaScript file has been registered.
    [url] (string) URL of the javascript file
    [position] (integer) the position of the JavaScript code. Valid values
    include the following:
      {CClientScript}:POS_HEAD : the script is inserted in the head
      section right before the title element.
      {CClientScript}:POS_BEGIN : the script is inserted at the
      beginning of the body section.
      {CClientScript}:POS_END : the script is inserted at the end of the
      body section.


*CClientScript::isScriptRegistered*				 public
>
 isScriptRegistered($id, $position=4)
<
(boolean) whether the javascript code is already registered

 Checks whether the JavaScript code has been registered.
    [id] (string) ID that uniquely identifies the JavaScript code
    [position] (integer) the position of the JavaScript code. Valid values
    include the following:
      {CClientScript}:POS_HEAD : the script is inserted in the head
      section right before the title element.
      {CClientScript}:POS_BEGIN : the script is inserted at the
      beginning of the body section.
      {CClientScript}:POS_END : the script is inserted at the end of the
      body section.
      {CClientScript}:POS_LOAD : the script is inserted in the
      window.onload() function.
      {CClientScript}:POS_READY : the script is inserted in the jQuery's
      ready function.


*CClientScript::recordCachingAction*				 protected
>
 recordCachingAction($context, $method, $params)
<
(void)

 Records a method call when an output cache is in effect. This is a shortcut
 to Yii::app()->controller->recordCachingAction. In case when controller is
 absent, nothing is recorded.
    [context] (string) a property name of the controller. It refers to an
    object whose method is being called. If empty it means the controller
    itself.
    [method] (string) the method name
    [params] (array) parameters passed to the method


*CClientScript::registerCoreScript*				 public
>
 registerCoreScript($name)
<
(CClientScript) the CClientScript object itself (to support method chaining,
available since version 1.1.5).

 Registers a script package that is listed in |CClientScript::packages|.
    [name] (string) the name of the script package.


*CClientScript::registerCss*					 public
>
 registerCss($id, $css, $media='')
<
(CClientScript) the CClientScript object itself (to support method chaining,
available since version 1.1.5).

 Registers a piece of CSS code.
    [id] (string) ID that uniquely identifies this piece of CSS code
    [css] (string) the CSS code
    [media] (string) media that the CSS code should be applied to. If empty,
    it means all media types.


*CClientScript::registerCssFile*				 public
>
 registerCssFile($url, $media='')
<
(CClientScript) the CClientScript object itself (to support method chaining,
available since version 1.1.5).

 Registers a CSS file
    [url] (string) URL of the CSS file
    [media] (string) media that the CSS file should be applied to. If empty,
    it means all media types.


*CClientScript::registerLinkTag*				 public
>
 registerLinkTag($relation='', $type='', $href='', $media='', $options=array())
<
(CClientScript) the CClientScript object itself (to support method chaining,
available since version 1.1.5).

 Registers a link tag that will be inserted in the head section (right before
 the title element) of the resulting page.
    [relation] (string) rel attribute of the link tag. If null, the attribute
    will not be generated.
    [type] (string) type attribute of the link tag. If null, the attribute
    will not be generated.
    [href] (string) href attribute of the link tag. If null, the attribute
    will not be generated.
    [media] (string) media attribute of the link tag. If null, the attribute
    will not be generated.
    [options] (array) other options in name-value pairs


*CClientScript::registerMetaTag*				 public
>
 registerMetaTag($content, $name='', $httpEquiv='', $options=array())
<
(CClientScript) the CClientScript object itself (to support method chaining,
available since version 1.1.5).

 Registers a meta tag that will be inserted in the head section (right before
 the title element) of the resulting page.

 <b>Note:</b> Meta tags with same attributes will be rendered more then once
 if called with different values.

 <b>Example:</b>
>
    $cs->registerMetaTag('example', 'description', null, array('lang' =>
 'en'));
    $cs->registerMetaTag('beispiel', 'description', null, array('lang' =>
 'de'));
<
    [content] (string) content attribute of the meta tag
    [name] (string) name attribute of the meta tag. If null, the attribute
    will not be generated
    [httpEquiv] (string) http-equiv attribute of the meta tag. If null, the
    attribute will not be generated
    [options] (array) other options in name-value pairs (e.g. 'scheme',
    'lang')


*CClientScript::registerPackage*				 public
>
 registerPackage($name)
<
(CClientScript) the CClientScript object itself (to support method chaining,
available since version 1.1.5).

 Registers a script package that is listed in |CClientScript::packages|. This
 method is the same as |CClientScript::registerCoreScript|.
    [name] (string) the name of the script package.


*CClientScript::registerScript* 				 public
>
 registerScript($id, $script, $position=4)
<
(CClientScript) the CClientScript object itself (to support method chaining,
available since version 1.1.5).

 Registers a piece of javascript code.
    [id] (string) ID that uniquely identifies this piece of JavaScript code
    [script] (string) the javascript code
    [position] (integer) the position of the JavaScript code. Valid values
    include the following:
      {CClientScript}:POS_HEAD : the script is inserted in the head
      section right before the title element.
      {CClientScript}:POS_BEGIN : the script is inserted at the
      beginning of the body section.
      {CClientScript}:POS_END : the script is inserted at the end of the
      body section.
      {CClientScript}:POS_LOAD : the script is inserted in the
      window.onload() function.
      {CClientScript}:POS_READY : the script is inserted in the jQuery's
      ready function.


*CClientScript::registerScriptFile*				 public
>
 registerScriptFile($url, $position=0)
<
(CClientScript) the CClientScript object itself (to support method chaining,
available since version 1.1.5).

 Registers a javascript file.
    [url] (string) URL of the javascript file
    [position] (integer) the position of the JavaScript code. Valid values
    include the following:
      {CClientScript}:POS_HEAD : the script is inserted in the head
      section right before the title element.
      {CClientScript}:POS_BEGIN : the script is inserted at the
      beginning of the body section.
      {CClientScript}:POS_END : the script is inserted at the end of the
      body section.


*CClientScript::remapScripts*					 protected
>
 remapScripts()
<
(void)

 Uses |CClientScript::scriptMap| to re-map the registered scripts.


*CClientScript::render* 					 public
>
 render($output)
<
(void)

 Renders the registered scripts. This method is called in
 |CController::render| when it finishes rendering content. CClientScript thus
 gets a chance to insert script tags at 'head' and 'body' sections in the HTML
 output.
    [output] (string) the existing output that needs to be inserted with
    script tags


*CClientScript::renderBodyBegin*				 public
>
 renderBodyBegin($output)
<
(void)

 Inserts the scripts at the beginning of the body section.
    [output] (string) the output to be inserted with scripts.


*CClientScript::renderBodyEnd*					 public
>
 renderBodyEnd($output)
<
(void)

 Inserts the scripts at the end of the body section.
    [output] (string) the output to be inserted with scripts.


*CClientScript::renderCoreScripts*				 public
>
 renderCoreScripts()
<
(void)

 Renders the specified core javascript library.


*CClientScript::renderHead*					 public
>
 renderHead($output)
<
(void)

 Inserts the scripts in the head section.
    [output] (string) the output to be inserted with scripts.


*CClientScript::reset*						 public
>
 reset()
<
(void)

 Cleans all registered scripts.


*CClientScript::setCoreScriptUrl*				 public
>
 setCoreScriptUrl($value)
<
(void)

 Sets the base URL of all core javascript files. This setter is provided in
 case when core javascript files are manually published to a pre-specified
 location. This may save asset publishing time for large-scale applications.
    [value] (string) the base URL of all core javascript files.


*CClientScript::unifyScripts*					 protected
>
 unifyScripts()
<
(void)

 Removes duplicated scripts from |CClientScript::scriptFiles|.



 vim:tw=78:ts=8:ft=help:norl:

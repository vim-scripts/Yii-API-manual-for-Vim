
*CMenu*   >> |CWidget| >> |CBaseController| >> |CComponent|
=======

 CMenu displays a multi-level menu using nested HTML lists.

 The main property of CMenu is |CMenu::items|, which specifies the possible
 items in the menu. A menu item has three main properties: visible, active and
 items. The "visible" property specifies whether the menu item is currently
 visible. The "active" property specifies whether the menu item is currently
 selected. And the "items" property specifies the child menu items.

 The following example shows how to use CMenu:
>
 $this->widget('zii.widgets.CMenu', array(
     'items'=>array(
         // Important: you need to specify url as 'controller/action',
         // not just as 'controller' even if default acion is used.
         array('label'=>'Home', 'url'=>array('site/index')),
         // 'Products' menu item will be selected no matter which tag
 parameter value is since it's not specified.
         array('label'=>'Products', 'url'=>array('product/index'),
 'items'=>array(
             array('label'=>'New Arrivals', 'url'=>array('product/new',
 'tag'=>'new')),
             array('label'=>'Most Popular', 'url'=>array('product/index',
 'tag'=>'popular')),
         )),
         array('label'=>'Login', 'url'=>array('site/login'),
 'visible'=>Yii::app()->user->isGuest),
     ),
 ));
<


PROPERTY DETAILS
------------------------------------------------------------------------------

<activateItems> 			*CMenu::activateItems*
 (boolean) whether to automatically activate items according to whether their
 route setting matches the currently requested route. Defaults to true.

<activateParents>			*CMenu::activateParents*
 (boolean) whether to activate parent menu items when one of the corresponding
 child menu items is active. The activated parent menu items will also have
 its CSS classes appended with |CMenu::activeCssClass|. Defaults to false.

<activeCssClass>			*CMenu::activeCssClass*
 (string) the CSS class to be appended to the active menu item. Defaults to
 'active'. If empty, the CSS class of menu items will not be changed.

<encodeLabel>				*CMenu::encodeLabel*
 (boolean) whether the labels for menu items should be HTML-encoded. Defaults
 to true.

<firstItemCssClass>			*CMenu::firstItemCssClass*
 (string) the CSS class that will be assigned to the first item in the main
 menu or each submenu. Defaults to null, meaning no such CSS class will be
 assigned.

<hideEmptyItems>			*CMenu::hideEmptyItems*
 (boolean) whether to hide empty menu items. An empty menu item is one whose
 'url' option is not set and which doesn't contain visible child menu items.
 Defaults to true.

<htmlOptions>				*CMenu::htmlOptions*
 (array) HTML attributes for the menu's root container tag

<itemCssClass>				*CMenu::itemCssClass*
 (string) the CSS class that will be assigned to every item. Defaults to null,
 meaning no such CSS class will be assigned.

<itemTemplate>				*CMenu::itemTemplate*
 (string) the template used to render an individual menu item. In this
 template, the token "{menu}" will be replaced with the corresponding menu
 link or text. If this property is not set, each menu will be rendered without
 any decoration. This property will be overridden by the 'template' option set
 in individual menu items via {@items}.

<items> 				*CMenu::items*
 (array) list of menu items. Each menu item is specified as an array of
 name-value pairs. Possible option names include the following:
   {label} string, optional, specifies the menu item label. When
   |CMenu::encodeLabel| is true, the label will be HTML-encoded. If
   the label is not specified, it defaults to an empty string.
   {url} string or array, optional, specifies the URL of the menu
   item. It is passed to |CHtml::normalizeUrl| to generate a valid
   URL. If this is not set, the menu item will be rendered as a span
   text.
   {visible} boolean, optional, whether this menu item is visible.
   Defaults to true. This can be used to control the visibility of
   menu items based on user permissions.
   {items} array, optional, specifies the sub-menu items. Its format
   is the same as the parent items.
   {active} boolean, optional, whether this menu item is in active
   state (currently selected). If a menu item is active and
   activeClass is not empty, its CSS class will be appended with
   activeClass. If this option is not set, the menu item will be set
   active automatically when the current request is triggered by url.
   Note that the GET parameters not specified in the 'url' option
   will be ignored.
   {template} string, optional, the template used to render this menu
   item. When this option is set, it will override the global setting
   |CMenu::itemTemplate|. Please see |CMenu::itemTemplate| for more
   details. This option has been available since version 1.1.1.
   {linkOptions} array, optional, additional HTML attributes to be
   rendered for the link or span tag of the menu item.
   {itemOptions} array, optional, additional HTML attributes to be
   rendered for the container tag of the menu item.
   {submenuOptions} array, optional, additional HTML attributes to be
   rendered for the container of the submenu if this menu item has
   one. When this option is set, the |CMenu::submenuHtmlOptions|
   property will be ignored for this particular submenu. This option
   has been available since version 1.1.6.

<lastItemCssClass>			*CMenu::lastItemCssClass*
 (string) the CSS class that will be assigned to the last item in the main
 menu or each submenu. Defaults to null, meaning no such CSS class will be
 assigned.

<linkLabelWrapper>			*CMenu::linkLabelWrapper*
 (string) the HTML element name that will be used to wrap the label of all
 menu links. For example, if this property is set as 'span', a menu item may
 be rendered as &lt;li&gt;&lt;a
 href="url"&gt;&lt;span&gt;label&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; This is
 useful when implementing menu items using the sliding window technique.
 Defaults to null, meaning no wrapper tag will be generated.

<submenuHtmlOptions>			*CMenu::submenuHtmlOptions*
 (array) HTML attributes for the submenu's container tag.



METHOD DETAILS
------------------------------------------------------------------------------

*CMenu::init*							 public
>
 init()
<
(void)

 Initializes the menu widget. This method mainly normalizes the |CMenu::items|
 property. If this method is overridden, make sure the parent implementation
 is invoked.


*CMenu::isItemActive*						 protected
>
 isItemActive($item, $route)
<
(boolean) whether the menu item is active

 Checks whether a menu item is active. This is done by checking if the
 currently requested URL is generated by the 'url' option of the menu item.
 Note that the GET parameters not specified in the 'url' option will be
 ignored.
    [item] (array) the menu item to be checked
    [route] (string) the route of the current request


*CMenu::normalizeItems* 					 protected
>
 normalizeItems($items, $route, $active)
<
(array) the normalized menu items

 Normalizes the |CMenu::items| property so that the 'active' state is properly
 identified for every menu item.
    [items] (array) the items to be normalized.
    [route] (string) the route of the current request.
    [active] (boolean) whether there is an active child menu item.


*CMenu::renderMenu*						 protected
>
 renderMenu($items)
<
(void)

 Renders the menu items.
    [items] (array) menu items. Each menu item will be an array with at least
    two elements: 'label' and 'active'. It may have three other optional
    elements: 'items', 'linkOptions' and 'itemOptions'.


*CMenu::renderMenuItem* 					 protected
>
 renderMenuItem($item)
<
(string) 

 Renders the content of a menu item. Note that the container and the sub-menus
 are not rendered here.
    [item] (array) the menu item to be rendered. Please see |CMenu::items| on
    what data might be in the item.


*CMenu::renderMenuRecursive*					 protected
>
 renderMenuRecursive($items)
<
(void)

 Recursively renders the menu items.
    [items] (array) the menu items to be rendered recursively


*CMenu::run*							 public
>
 run()
<
(void)

 Calls |CMenu::renderMenu| to render the menu.



 vim:tw=78:ts=8:ft=help:norl:


*CWidgetFactory*   >> |CApplicationComponent| >> |CComponent|
================

 CWidgetFactory creates new widgets to be used in views.

 CWidgetFactory is used as the default "widgetFactory" application component.

 When calling |CBaseController::createWidget|, |CBaseController::widget| or
 |CBaseController::beginWidget|, if the "widgetFactory" component is
 installed, it will be used to create the requested widget. To install the
 "widgetFactory" component, we should have the following application
 configuration:
>
 return array(
     'components'=>array(
         'widgetFactory'=>array(
             'class'=>'CWidgetFactory',
         ),
     ),
 )
<
 CWidgetFactory implements the "skin" feature, which allows a new widget to be
 created and initialized with a set of predefined property values (called
 skin).

 When CWidgetFactory is used to create a new widget, it will first instantiate
 the widget instance. It then checks if there is a skin available for this
 widget according to the widget class name and the widget |CWidget::skin|
 property. If a skin is found, it will be merged with the initial properties
 passed via |CWidgetFactory::createWidget|. Then the merged initial properties
 will be used to initialize the newly created widget instance.

 As aforementioned, a skin is a set of initial property values for a widget.
 It is thus represented as an associative array of name-value pairs. Skins are
 stored in PHP scripts like other configurations. Each script file stores the
 skins for a particular widget type and is named as the widget class name
 (e.g. CLinkPager.php). Each widget type may have one or several skins,
 identified by the skin name set via |CWidget::skin| property. If the
 |CWidget::skin| property is not set for a given widget, it means the default
 skin would be used. The following shows the possible skins for the
 |CLinkPager| widget:
>
 return array(
     'default'=>array(
         'nextPageLabel'=>'&gt;&gt;',
         'prevPageLabel'=>'&lt;&lt;',
     ),
     'short'=>array(
         'header'=>'',
         'maxButtonCount'=>5,
     ),
 );
<
 In the above, there are two skins. The first one is the default skin which is
 indexed by the string "default". Note that |CWidget::skin| defaults to
 "default". Therefore, this is the skin that will be applied if we do not
 explicitly specify the |CWidget::skin| property. The second one is named as
 the "short" skin which will be used only when we set |CWidget::skin| to be
 "short".

 By default, CWidgetFactory looks for the skin of a widget under the "skins"
 directory of the current application's |CWebApplication::viewPath| (e.g.
 protected/views/skins). If a theme is being used, it will look for the skin
 under the "skins" directory of the theme's |CTheme::viewPath| (as well as the
 aforementioned skin directory). In case the specified skin is not found, a
 widget will still be created normally without causing any error.


PROPERTY DETAILS
------------------------------------------------------------------------------

<enableSkin>				*CWidgetFactory::enableSkin*
 (boolean) whether to enable widget skinning. Defaults to false.

<skinPath>				*CWidgetFactory::skinPath*
 (string) the directory containing all the skin files. Defaults to null,
 meaning using the "skins" directory under the current application's
 |CWebApplication::viewPath|.

<skinnableWidgets>			*CWidgetFactory::skinnableWidgets*
 (array) list of widget class names that can be skinned. Because skinning
 widgets has performance impact, you may want to specify this property to
 limit skinning only to specific widgets. Any widgets that are not in this
 list will not be skinned. Defaults to null, meaning all widgets can be
 skinned.

<widgets>				*CWidgetFactory::widgets*
 (array) widget initial property values. Each array key-value pair represents
 the initial property values for a single widget class, with the array key
 being the widget class name, and array value being the initial property value
 array. For example,
>
 array(
     'CLinkPager'=>array(
         'maxButtonCount'=>5,
         'cssFile'=>false,
     ),
     'CJuiDatePicker'=>array(
         'language'=>'ru',
     ),
 )
<
 Note that the initial values specified here may be overridden by the values
 given in |CBaseController::createWidget| calls. They may also be overridden
 by widget skins, if |CWidgetFactory::enableSkin| is true.



METHOD DETAILS
------------------------------------------------------------------------------

*CWidgetFactory::createWidget*					 public
>
 createWidget($owner, $className, $properties=array())
<
(CWidget) the newly created widget whose properties have been initialized with
the given values.

 Creates a new widget based on the given class name and initial properties.
    [owner] (CBaseController) the owner of the new widget
    [className] (string) the class name of the widget. This can also be a path
    alias (e.g. system.web.widgets.COutputCache)
    [properties] (array) the initial property values (name=>value) of the
    widget.


*CWidgetFactory::getSkin*					 protected
>
 getSkin($className, $skinName)
<
(array) the skin (name=>value) for the widget

 Returns the skin for the specified widget class and skin name.
    [className] (string) the widget class name
    [skinName] (string) the widget skin name


*CWidgetFactory::init*						 public
>
 init()
<
(void)

 Initializes the application component. This method overrides the parent
 implementation by resolving the skin path.



 vim:tw=78:ts=8:ft=help:norl:


*CFormInputElement*   >> |CFormElement| >> |CComponent|
===================

 CFormInputElement represents form input element.

 CFormInputElement can represent the following types of form input based on
 |CFormInputElement::type| property:
   {text} a normal text input generated using
   |CHtml::activeTextField|
   {hidden} a hidden input generated using |CHtml::activeHiddenField|
   {password} a password input generated using
   |CHtml::activePasswordField|
   {textarea} a text area generated using |CHtml::activeTextArea|
   {file} a file input generated using |CHtml::activeFileField|
   {radio} a radio button generated using |CHtml::activeRadioButton|
   {checkbox} a check box generated using |CHtml::activeCheckBox|
   {listbox} a list box generated using |CHtml::activeListBox|
   {dropdownlist} a drop-down list generated using
   |CHtml::activeDropDownList|
   {checkboxlist} a list of check boxes generated using
   |CHtml::activeCheckBoxList|
   {radiolist} a list of radio buttons generated using
   |CHtml::activeRadioButtonList|The |CFormInputElement::type| property can
 also be a class name or a path alias to the class. In this case, the input is
 generated using a widget of the specified class. Note, the widget must have a
 property called "model" which expects a model object, and a property called
 "attribute" which expects the name of a model attribute.

 Because CFormElement is an ancestor class of CFormInputElement, a value
 assigned to a non-existing property will be stored in
 |CFormInputElement::attributes| which will be passed as HTML attribute values
 to the |CHtml| method generating the input or initial values of the widget
 properties.


PROPERTY DETAILS
------------------------------------------------------------------------------

<coreTypes>				*CFormInputElement::coreTypes*
 (array) Core input types (alias=>CHtml method name)

<enableAjaxValidation>			*CFormInputElement::enableAjaxValidation*
 (boolean) whether to allow AJAX-based validation for this input. Note that in
 order to use AJAX-based validation, |CForm::activeForm| must be configured
 with 'enableAjaxValidation'=>true. This property allows turning on or off 
 AJAX-based validation for individual input fields. Defaults to true.

<enableClientValidation>		*CFormInputElement::enableClientValidation*
 (boolean) whether to allow client-side validation for this input. Note that
 in order to use client-side validation, |CForm::activeForm| must be
 configured with 'enableClientValidation'=>true. This property allows turning
 on or off  client-side validation for individual input fields. Defaults to
 true.

<errorOptions>				*CFormInputElement::errorOptions*
 (array) the options used when rendering the error part. This property will be
 passed to the |CActiveForm::error| method call as its $htmlOptions parameter.

<hint>					*CFormInputElement::hint*
 (string) hint text of this input

<items> 				*CFormInputElement::items*
 (array) the options for this input when it is a list box, drop-down list,
 check box list, or radio button list. Please see |CHtml::listData| for
 details of generating this property value.

<label> 				*CFormInputElement::label*
 (string) the label for this input. If the label is not manually set, this
 method will call |CModel::getAttributeLabel| to determine the label.

<layout>				*CFormInputElement::layout*
 (string) the layout used to render label, input, hint and error. They
 correspond to the placeholders "{label}", "{input}", "{hint}" and "{error}".

<name>					*CFormInputElement::name*
 (string) name of this input

<required>				*CFormInputElement::required*
 (boolean) Gets the value indicating whether this input is required. If this
 property is not set explicitly, it will be determined by calling
 |CModel::isAttributeRequired| for the associated model and attribute of this
 input.

<type>					*CFormInputElement::type*
 (string) the type of this input. This can be a widget class name, a path
 alias of a widget class name, or a input type alias (text, hidden, password,
 textarea, file, radio, checkbox, listbox, dropdownlist, checkboxlist, or
 radiolist). If a widget class, it must extend from |CInputWidget| or (@link
 CJuiInputWidget).



METHOD DETAILS
------------------------------------------------------------------------------

*CFormInputElement::evaluateVisible*				 protected
>
 evaluateVisible()
<
(boolean) whether this element is visible.

 Evaluates the visibility of this element. This method will check if the
 attribute associated with this input is safe for the current model scenario.


*CFormInputElement::getLabel*					 public
>
 getLabel()
<
(string) the label for this input. If the label is not manually set, this
method will call |CModel::getAttributeLabel| to determine the label.



*CFormInputElement::getRequired*				 public
>
 getRequired()
<
(boolean) whether this input is required.

 Gets the value indicating whether this input is required. If this property is
 not set explicitly, it will be determined by calling
 |CModel::isAttributeRequired| for the associated model and attribute of this
 input.


*CFormInputElement::render*					 public
>
 render()
<
(string) the complete rendering result for this input, including label, input
field, hint, and error.

 Renders everything for this input. The default implementation simply returns
 the result of |CFormInputElement::renderLabel|,
 |CFormInputElement::renderInput|, |CFormInputElement::renderHint|. When
 |CForm::showErrorSummary| is false, |CFormInputElement::renderError| is also
 called to show error messages after individual input fields.


*CFormInputElement::renderError*				 public
>
 renderError()
<
(string) the rendering result

 Renders the error display of this input. The default implementation returns
 the result of |CHtml::error|


*CFormInputElement::renderHint* 				 public
>
 renderHint()
<
(string) the rendering result.

 Renders the hint text for this input. The default implementation returns the
 |CFormInputElement::hint| property enclosed in a paragraph HTML tag.


*CFormInputElement::renderInput*				 public
>
 renderInput()
<
(string) the rendering result

 Renders the input field. The default implementation returns the result of the
 appropriate CHtml method or the widget.


*CFormInputElement::renderLabel*				 public
>
 renderLabel()
<
(string) the rendering result

 Renders the label for this input. The default implementation returns the
 result of |CHtml|.


*CFormInputElement::setLabel*					 public
>
 setLabel($value)
<
(void)

    [value] (string) the label for this input


*CFormInputElement::setRequired*				 public
>
 setRequired($value)
<
(void)

    [value] (boolean) whether this input is required.



 vim:tw=78:ts=8:ft=help:norl:

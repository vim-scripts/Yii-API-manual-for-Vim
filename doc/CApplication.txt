
*CApplication*   >> |CModule| >> |CComponent|
==============

 CApplication is the base class for all application classes.

 An application serves as the global context that the user request is being
 processed. It manages a set of application components that provide specific
 functionalities to the whole application.

 The core application components provided by CApplication are the following:
   |CApplication::getErrorHandler|: handles PHP errors and   uncaught
   exceptions. This application component is dynamically loaded when
   needed.
   |CApplication::getSecurityManager|: provides security-related  
   services, such as hashing, encryption. This application component
   is dynamically   loaded when needed.
   |CApplication::getStatePersister|: provides global state  
   persistence method. This application component is dynamically
   loaded when needed.
   |CApplication::getCache|: provides caching feature. This
   application component is   disabled by default.
   |CApplication::getMessages|: provides the message source for
   translating   application messages. This application component is
   dynamically loaded when needed.
   |CApplication::getCoreMessages|: provides the message source for
   translating   Yii framework messages. This application component
   is dynamically loaded when needed.CApplication will undergo the following
 lifecycles when processing a user request:

   1. load application configuration;
   2. set up class autoloader and error handling;
   3. load static application components;
   4. |CApplication::onBeginRequest|: preprocess the user request;
   5. |CApplication::processRequest|: process the user request;
   6. |CApplication::onEndRequest|: postprocess the user request;

 Starting from lifecycle 3, if a PHP error or an uncaught exception occurs,
 the application will switch to its error handling logic and jump to step 6
 afterwards.


PROPERTY DETAILS
------------------------------------------------------------------------------

<basePath>				*CApplication::basePath*
 (string) Returns the root path of the application.

<baseUrl>				*CApplication::baseUrl*
 (string) Returns the relative URL for the application. This is a shortcut
 method to |CHttpRequest::getBaseUrl|.

<cache> 				*CApplication::cache*
 (CCache) Returns the cache component.

<charset>				*CApplication::charset*
 (string) the charset currently used for the application. Defaults to 'UTF-8'.

<controller>				*CApplication::controller*
 (CController) the currently active controller. Null is returned in this base
 class.

<coreMessages>				*CApplication::coreMessages*
 (CPhpMessageSource) Returns the core message translations component.

<dateFormatter> 			*CApplication::dateFormatter*
 (CDateFormatter) Returns the locale-dependent date formatter.

<db>					*CApplication::db*
 (CDbConnection) Returns the database connection component.

<errorHandler>				*CApplication::errorHandler*
 (CErrorHandler) Returns the error handler component.

<extensionPath> 			*CApplication::extensionPath*
 (string) Returns the root directory that holds all third-party extensions.

<homeUrl>				*CApplication::homeUrl*
 (string) the homepage URL

<id>					*CApplication::id*
 (string) Returns the unique identifier for the application.

<language>				*CApplication::language*
 (string) Returns the language that the user is using and the application
 should be targeted to.

<locale>				*CApplication::locale*
 (CLocale) Returns the locale instance.

<localeDataPath>			*CApplication::localeDataPath*
 (string) Returns the directory that contains the locale data.

<messages>				*CApplication::messages*
 (CMessageSource) Returns the application message translations component.

<name>					*CApplication::name*
 (string) the application name. Defaults to 'My Application'.

<numberFormatter>			*CApplication::numberFormatter*
 (CNumberFormatter) the locale-dependent number formatter. The current
 |CApplication::getLocale| will be used.

<request>				*CApplication::request*
 (CHttpRequest) Returns the request component.

<runtimePath>				*CApplication::runtimePath*
 (string) Returns the directory that stores runtime files.

<securityManager>			*CApplication::securityManager*
 (CSecurityManager) Returns the security manager component.

<sourceLanguage>			*CApplication::sourceLanguage*
 (string) the language that the application is written in. This mainly refers
 to the language that the messages and view files are in. Defaults to 'en_us'
 (US English).

<statePersister>			*CApplication::statePersister*
 (CStatePersister) Returns the state persister component.

<timeZone>				*CApplication::timeZone*
 (string) Returns the time zone used by this application. This is a simple
 wrapper of PHP function date_default_timezone_get().

<urlManager>				*CApplication::urlManager*
 (CUrlManager) Returns the URL manager component.



METHOD DETAILS
------------------------------------------------------------------------------

*CApplication::__construct*					 public
>
 __construct($config=NULL)
<
(void)

 Constructor.
    [config] (mixed) application configuration. If a string, it is treated as
    the path of the file that contains the configuration; If an array, it is
    the actual configuration information. Please make sure you specify the
    |CApplication::getBasePath| property in the configuration, which should
    point to the directory containing all application logic, template and
    data. If not, the directory will be defaulted to 'protected'.


*CApplication::clearGlobalState*				 public
>
 clearGlobalState($key)
<
(void)

 Clears a global value.

 The value cleared will no longer be available in this request and the
 following requests.
    [key] (string) the name of the value to be cleared


*CApplication::createAbsoluteUrl*				 public
>
 createAbsoluteUrl($route, $params=array(), $schema='', $ampersand='&')
<
(string) the constructed URL

 Creates an absolute URL based on the given controller and action information.
    [route] (string) the URL route. This should be in the format of
    'ControllerID/ActionID'.
    [params] (array) additional GET parameters (name=>value). Both the name
    and value will be URL-encoded.
    [schema] (string) schema to use (e.g. http, https). If empty, the schema
    used for the current request will be used.
    [ampersand] (string) the token separating name-value pairs in the URL.


*CApplication::createUrl*					 public
>
 createUrl($route, $params=array(), $ampersand='&')
<
(string) the constructed URL

 Creates a relative URL based on the given controller and action information.
    [route] (string) the URL route. This should be in the format of
    'ControllerID/ActionID'.
    [params] (array) additional GET parameters (name=>value). Both the name
    and value will be URL-encoded.
    [ampersand] (string) the token separating name-value pairs in the URL.


*CApplication::displayError*					 public
>
 displayError($code, $message, $file, $line)
<
(void)

 Displays the captured PHP error. This method displays the error in HTML when
 there is no active error handler.
    [code] (integer) error code
    [message] (string) error message
    [file] (string) error file
    [line] (string) error line


*CApplication::displayException*				 public
>
 displayException($exception)
<
(void)

 Displays the uncaught PHP exception. This method displays the exception in
 HTML when there is no active error handler.
    [exception] (Exception) the uncaught exception


*CApplication::end*						 public
>
 end($status=0, $exit=true)
<
(void)

 Terminates the application. This method replaces PHP's exit() function by
 calling |CApplication::onEndRequest| before exiting.
    [status] (integer) exit status (value 0 means normal exit while other
    values mean abnormal exit).
    [exit] (boolean) whether to exit the current request. This parameter has
    been available since version 1.1.5. It defaults to true, meaning the PHP's
    exit() function will be called at the end of this method.


*CApplication::findLocalizedFile*				 public
>
 findLocalizedFile($srcFile, $srcLanguage='', $language='')
<
(string) the matching localized file. The original file is returned if no
localized version is found or if source language is the same as the desired
language.

 Returns the localized version of a specified file.

 The searching is based on the specified language code. In particular, a file
 with the same name will be looked for under the subdirectory named as the
 locale ID. For example, given the file "path/to/view.php" and locale ID
 "zh_cn", the localized file will be looked for as "path/to/zh_cn/view.php".
 If the file is not found, the original file will be returned.

 For consistency, it is recommended that the locale ID is given in lower case
 and in the format of LanguageID_RegionID (e.g. "en_us").
    [srcFile] (string) the original file
    [srcLanguage] (string) the language that the original file is in. If null,
    the application |CApplication::sourceLanguage| is used.
    [language] (string) the desired language that the file should be localized
    to. If null, the |CApplication::getLanguage| will be used.


*CApplication::getBasePath*					 public
>
 getBasePath()
<
(string) the root directory of the application. Defaults to 'protected'.

 Returns the root path of the application.


*CApplication::getBaseUrl*					 public
>
 getBaseUrl($absolute=false)
<
(string) the relative URL for the application

 Returns the relative URL for the application. This is a shortcut method to
 |CHttpRequest::getBaseUrl|.
    [absolute] (boolean) whether to return an absolute URL. Defaults to false,
    meaning returning a relative one.


*CApplication::getCache*					 public
>
 getCache()
<
(CCache) the cache application component. Null if the component is not
enabled.

 Returns the cache component.


*CApplication::getController*					 public
>
 getController()
<
(CController) the currently active controller. Null is returned in this base
class.



*CApplication::getCoreMessages* 				 public
>
 getCoreMessages()
<
(CPhpMessageSource) the core message translations

 Returns the core message translations component.


*CApplication::getDateFormatter*				 public
>
 getDateFormatter()
<
(CDateFormatter) the locale-dependent date formatter. The current
|CApplication::getLocale| will be used.

 Returns the locale-dependent date formatter.


*CApplication::getDb*						 public
>
 getDb()
<
(CDbConnection) the database connection

 Returns the database connection component.


*CApplication::getErrorHandler* 				 public
>
 getErrorHandler()
<
(CErrorHandler) the error handler application component.

 Returns the error handler component.


*CApplication::getExtensionPath*				 public
>
 getExtensionPath()
<
(string) the directory that contains all extensions. Defaults to the
'extensions' directory under 'protected'.

 Returns the root directory that holds all third-party extensions.


*CApplication::getGlobalState*					 public
>
 getGlobalState($key, $defaultValue=NULL)
<
(mixed) the named global value

 Returns a global value.

 A global value is one that is persistent across users sessions and requests.
    [key] (string) the name of the value to be returned
    [defaultValue] (mixed) the default value. If the named global value is not
    found, this will be returned instead.


*CApplication::getHomeUrl*					 public
>
 getHomeUrl()
<
(string) the homepage URL



*CApplication::getId*						 public
>
 getId()
<
(string) the unique identifier for the application.

 Returns the unique identifier for the application.


*CApplication::getLanguage*					 public
>
 getLanguage()
<
(string) the language that the user is using and the application should be
targeted to. Defaults to the |CApplication::sourceLanguage|.

 Returns the language that the user is using and the application should be
 targeted to.


*CApplication::getLocale*					 public
>
 getLocale($localeID='')
<
(CLocale) the locale instance

 Returns the locale instance.
    [localeID] (string) the locale ID (e.g. en_US). If null, the
    |CApplication::getLanguage| will be used.


*CApplication::getLocaleDataPath*				 public
>
 getLocaleDataPath()
<
(string) the directory that contains the locale data. It defaults to
'framework/i18n/data'.

 Returns the directory that contains the locale data.


*CApplication::getMessages*					 public
>
 getMessages()
<
(CMessageSource) the application message translations

 Returns the application message translations component.


*CApplication::getNumberFormatter*				 public
>
 getNumberFormatter()
<
(CNumberFormatter) the locale-dependent number formatter. The current
|CApplication::getLocale| will be used.



*CApplication::getRequest*					 public
>
 getRequest()
<
(CHttpRequest) the request component

 Returns the request component.


*CApplication::getRuntimePath*					 public
>
 getRuntimePath()
<
(string) the directory that stores runtime files. Defaults to
'protected/runtime'.

 Returns the directory that stores runtime files.


*CApplication::getSecurityManager*				 public
>
 getSecurityManager()
<
(CSecurityManager) the security manager application component.

 Returns the security manager component.


*CApplication::getStatePersister*				 public
>
 getStatePersister()
<
(CStatePersister) the state persister application component.

 Returns the state persister component.


*CApplication::getTimeZone*					 public
>
 getTimeZone()
<
(string) the time zone used by this application.

 Returns the time zone used by this application. This is a simple wrapper of
 PHP function date_default_timezone_get().


*CApplication::getUrlManager*					 public
>
 getUrlManager()
<
(CUrlManager) the URL manager component

 Returns the URL manager component.


*CApplication::handleError*					 public
>
 handleError($code, $message, $file, $line)
<
(void)

 Handles PHP execution errors such as warnings, notices.

 This method is implemented as a PHP error handler. It requires that constant
 YII_ENABLE_ERROR_HANDLER be defined true.

 This method will first raise an |CApplication::onError| event. If the error
 is not handled by any event handler, it will call
 |CApplication::getErrorHandler| to process the error.

 The application will be terminated by this method.
    [code] (integer) the level of the error raised
    [message] (string) the error message
    [file] (string) the filename that the error was raised in
    [line] (integer) the line number the error was raised at


*CApplication::handleException* 				 public
>
 handleException($exception)
<
(void)

 Handles uncaught PHP exceptions.

 This method is implemented as a PHP exception handler. It requires that
 constant YII_ENABLE_EXCEPTION_HANDLER be defined true.

 This method will first raise an |CApplication::onException| event. If the
 exception is not handled by any event handler, it will call
 |CApplication::getErrorHandler| to process the exception.

 The application will be terminated by this method.
    [exception] (Exception) exception that is not caught


*CApplication::initSystemHandlers*				 protected
>
 initSystemHandlers()
<
(void)

 Initializes the class autoloader and error handlers.


*CApplication::loadGlobalState* 				 public
>
 loadGlobalState()
<
(void)

 Loads the global state data from persistent storage.


*CApplication::onBeginRequest*					 public
>
 onBeginRequest($event)
<
(void)

 Raised right BEFORE the application processes the request.
    [event] (CEvent) the event parameter


*CApplication::onEndRequest*					 public
>
 onEndRequest($event)
<
(void)

 Raised right AFTER the application processes the request.
    [event] (CEvent) the event parameter


*CApplication::onError* 					 public
>
 onError($event)
<
(void)

 Raised when a PHP execution error occurs.

 An event handler can set the |CErrorEvent::handled| property of the event
 parameter to be true to indicate no further error handling is needed.
 Otherwise, the |CApplication::getErrorHandler| application component will
 continue processing the error.
    [event] (CErrorEvent) event parameter


*CApplication::onException*					 public
>
 onException($event)
<
(void)

 Raised when an uncaught PHP exception occurs.

 An event handler can set the |CExceptionEvent::handled| property of the event
 parameter to be true to indicate no further error handling is needed.
 Otherwise, the |CApplication::getErrorHandler| application component will
 continue processing the error.
    [event] (CExceptionEvent) event parameter


*CApplication::processRequest*					 public
>
 processRequest()
<
(void)

 Processes the request. This is the place where the actual request processing
 work is done. Derived classes should override this method.


*CApplication::registerCoreComponents*				 protected
>
 registerCoreComponents()
<
(void)

 Registers the core application components.


*CApplication::run*						 public
>
 run()
<
(void)

 Runs the application. This method loads static application components.
 Derived classes usually overrides this method to do more application-specific
 tasks. Remember to call the parent implementation so that static application
 components are loaded.


*CApplication::saveGlobalState* 				 public
>
 saveGlobalState()
<
(void)

 Saves the global state data into persistent storage.


*CApplication::setBasePath*					 public
>
 setBasePath($path)
<
(void)

 Sets the root directory of the application. This method can only be invoked
 at the begin of the constructor.
    [path] (string) the root directory of the application.


*CApplication::setExtensionPath*				 public
>
 setExtensionPath($path)
<
(void)

 Sets the root directory that holds all third-party extensions.
    [path] (string) the directory that contains all third-party extensions.


*CApplication::setGlobalState*					 public
>
 setGlobalState($key, $value, $defaultValue=NULL)
<
(void)

 Sets a global value.

 A global value is one that is persistent across users sessions and requests.
 Make sure that the value is serializable and unserializable.
    [key] (string) the name of the value to be saved
    [value] (mixed) the global value to be saved. It must be serializable.
    [defaultValue] (mixed) the default value. If the named global value is the
    same as this value, it will be cleared from the current storage.


*CApplication::setHomeUrl*					 public
>
 setHomeUrl($value)
<
(void)

    [value] (string) the homepage URL


*CApplication::setId*						 public
>
 setId($id)
<
(void)

 Sets the unique identifier for the application.
    [id] (string) the unique identifier for the application.


*CApplication::setLanguage*					 public
>
 setLanguage($language)
<
(void)

 Specifies which language the application is targeted to.

 This is the language that the application displays to end users. If set null,
 it uses the |CApplication::sourceLanguage|.

 Unless your application needs to support multiple languages, you should
 always set this language to null to maximize the application's performance.
    [language] (string) the user language (e.g. 'en_US', 'zh_CN'). If it is
    null, the |CApplication::sourceLanguage| will be used.


*CApplication::setLocaleDataPath*				 public
>
 setLocaleDataPath($value)
<
(void)

 Sets the directory that contains the locale data.
    [value] (string) the directory that contains the locale data.


*CApplication::setRuntimePath*					 public
>
 setRuntimePath($path)
<
(void)

 Sets the directory that stores runtime files.
    [path] (string) the directory that stores runtime files.


*CApplication::setTimeZone*					 public
>
 setTimeZone($value)
<
(void)

 Sets the time zone used by this application. This is a simple wrapper of PHP
 function date_default_timezone_set().
    [value] (string) the time zone used by this application.



 vim:tw=78:ts=8:ft=help:norl:

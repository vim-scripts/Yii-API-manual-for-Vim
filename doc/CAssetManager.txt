
*CAssetManager*   >> |CApplicationComponent| >> |CComponent|
===============

 CAssetManager is a Web application component that manages private files
 (called assets) and makes them accessible by Web clients.

 It achieves this goal by copying assets to a Web-accessible directory and
 returns the corresponding URL for accessing them.

 To publish an asset, simply call |CAssetManager::publish|.

 The Web-accessible directory holding the published files is specified by
 |CAssetManager::setBasePath|, which defaults to the "assets" directory under
 the directory containing the application entry script file. The property
 |CAssetManager::setBaseUrl| refers to the URL for accessing the
 |CAssetManager::setBasePath|.


PROPERTY DETAILS
------------------------------------------------------------------------------

<basePath>				*CAssetManager::basePath*
 (string) the root directory storing the published asset files. Defaults to
 'WebRoot/assets'.

<baseUrl>				*CAssetManager::baseUrl*
 (string) the base url that the published asset files can be accessed. Note,
 the ending slashes are stripped off. Defaults to '/AppBaseUrl/assets'.

<excludeFiles>				*CAssetManager::excludeFiles*
 (array) list of directories and files which should be excluded from the
 publishing process. Defaults to exclude '.svn' files only. This option has no
 effect if |CAssetManager::linkAssets| is enabled.

<linkAssets>				*CAssetManager::linkAssets*
 (boolean) whether to use symbolic link to publish asset files. Defaults to
 false, meaning asset files are copied to public folders. Using symbolic links
 has the benefit that the published assets will always be consistent with the
 source assets. This is especially useful during development.

 However, there are special requirements for hosting environments in order to
 use symbolic links. In particular, symbolic links are supported only on
 Linux/Unix, and Windows Vista/2008 or greater. The latter requires PHP 5.3 or
 greater.

 Moreover, some Web servers need to be properly configured so that the linked
 assets are accessible to Web users. For example, for Apache Web server, the
 following configuration directive should be added for the Web folder:
>
 Options FollowSymLinks
<

<newDirMode>				*CAssetManager::newDirMode*
 (integer) the permission to be set for newly generated asset directories.
 This value will be used by PHP chmod function. Defaults to 0777, meaning the
 directory can be read, written and executed by all users.

<newFileMode>				*CAssetManager::newFileMode*
 (integer) the permission to be set for newly generated asset files. This
 value will be used by PHP chmod function. Defaults to 0666, meaning the file
 is read-writable by all users.



METHOD DETAILS
------------------------------------------------------------------------------

*CAssetManager::getBasePath*					 public
>
 getBasePath()
<
(string) the root directory storing the published asset files. Defaults to
'WebRoot/assets'.



*CAssetManager::getBaseUrl*					 public
>
 getBaseUrl()
<
(string) the base url that the published asset files can be accessed. Note,
the ending slashes are stripped off. Defaults to '/AppBaseUrl/assets'.



*CAssetManager::getPublishedPath*				 public
>
 getPublishedPath($path, $hashByName=false)
<
(string) the published file path. False if the file or directory does not
exist

 Returns the published path of a file path. This method does not perform any
 publishing. It merely tells you if the file or directory is published, where
 it will go.
    [path] (string) directory or file path being published
    [hashByName] (boolean) whether the published directory should be named as
    the hashed basename. If false, the name will be the hash taken from
    dirname of the path being published and path mtime. Defaults to false. Set
    true if the path being published is shared among different extensions.


*CAssetManager::getPublishedUrl*				 public
>
 getPublishedUrl($path, $hashByName=false)
<
(string) the published URL for the file or directory. False if the file or
directory does not exist.

 Returns the URL of a published file path. This method does not perform any
 publishing. It merely tells you if the file path is published, what the URL
 will be to access it.
    [path] (string) directory or file path being published
    [hashByName] (boolean) whether the published directory should be named as
    the hashed basename. If false, the name will be the hash taken from
    dirname of the path being published and path mtime. Defaults to false. Set
    true if the path being published is shared among different extensions.


*CAssetManager::hash*						 protected
>
 hash($path)
<
(string) hashed string.

 Generate a CRC32 hash for the directory path. Collisions are higher than MD5
 but generates a much smaller hash string.
    [path] (string) string to be hashed.


*CAssetManager::publish*					 public
>
 publish($path, $hashByName=false, $level=-1, $forceCopy=false)
<
(string) an absolute URL to the published asset

 Publishes a file or a directory. This method will copy the specified asset to
 a web accessible directory and return the URL for accessing the published
 asset.
   If the asset is a file, its file modification time will be checked
   to avoid unnecessary file copying;
   If the asset is a directory, all files and subdirectories under it
   will be published recursively. Note, in case $forceCopy is false
   the method only checks the existence of the target directory to
   avoid repetitive copying.Note: On rare scenario, a race condition can
 develop that will lead to a one-time-manifestation of a non-critical problem
 in the creation of the directory that holds the published assets. This
 problem can be avoided altogether by 'requesting' in advance all the
 resources that are supposed to trigger a 'publish()' call, and doing that in
 the application deployment phase, before system goes live. See more in the
 following discussion: http://code.google.com/p/yii/issues/detail?id=2579
    [path] (string) the asset (file or directory) to be published
    [hashByName] (boolean) whether the published directory should be named as
    the hashed basename. If false, the name will be the hash taken from
    dirname of the path being published and path mtime. Defaults to false. Set
    true if the path being published is shared among different extensions.
    [level] (integer) level of recursive copying when the asset is a
    directory. Level -1 means publishing all subdirectories and files; Level 0
    means publishing only the files DIRECTLY under the directory; level N
    means copying those directories that are within N levels.
    [forceCopy] (boolean) whether we should copy the asset file or directory
    even if it is already published before. This parameter is set true mainly
    during development stage when the original assets are being constantly
    changed. The consequence is that the performance is degraded, which is not
    a concern during development, however. This parameter has been available
    since version 1.1.2.


*CAssetManager::setBasePath*					 public
>
 setBasePath($value)
<
(void)

 Sets the root directory storing published asset files.
    [value] (string) the root directory storing published asset files


*CAssetManager::setBaseUrl*					 public
>
 setBaseUrl($value)
<
(void)

    [value] (string) the base url that the published asset files can be
    accessed



 vim:tw=78:ts=8:ft=help:norl:


*CFormatter*   >> |CApplicationComponent| >> |CComponent|
============

 CFormatter provides a set of commonly used data formatting methods.

 The formatting methods provided by CFormatter are all named in the form of
 'formatXyz'. The behavior of some of them may be configured via the
 properties of CFormatter. For example, by configuring
 |CFormatter::dateFormat|, one may control how |CFormatter::formatDate|
 formats the value into a date string.

 For convenience, CFormatter also implements the mechanism of calling
 formatting methods with their shortcuts (called types). In particular, if a
 formatting method is named 'formatXyz', then its shortcut method is 'xyz'
 (case-insensitive). For example, calling '$formatter->date($value)' is
 equivalent to calling '$formatter->formatDate($value)'.

 Currently, the following types are recognizable:
   {raw} the attribute value will not be changed at all.
   {text} the attribute value will be HTML-encoded when rendering.
   {ntext} the |CFormatter::formatNtext| method will be called to
   format the attribute value as a HTML-encoded plain text with
   newlines converted as the HTML &lt;br /&gt; tags.
   {html} the attribute value will be purified and then returned.
   {date} the |CFormatter::formatDate| method will be called to
   format the attribute value as a date.
   {time} the |CFormatter::formatTime| method will be called to
   format the attribute value as a time.
   {datetime} the |CFormatter::formatDatetime| method will be called
   to format the attribute value as a date with time.
   {boolean} the |CFormatter::formatBoolean| method will be called to
   format the attribute value as a boolean display.
   {number} the |CFormatter::formatNumber| method will be called to
   format the attribute value as a number display.
   {email} the |CFormatter::formatEmail| method will be called to
   format the attribute value as a mailto link.
   {image} the |CFormatter::formatImage| method will be called to
   format the attribute value as an image tag where the attribute
   value is the image URL.
   {url} the |CFormatter::formatUrl| method will be called to format
   the attribute value as a hyperlink where the attribute value is
   the URL.By default, |CApplication| registers |CFormatter| as an application
 component whose ID is 'format'. Therefore, one may call
 'Yii::app()->format->boolean(1)'.


PROPERTY DETAILS
------------------------------------------------------------------------------

<booleanFormat> 			*CFormatter::booleanFormat*
 (array) the text to be displayed when formatting a boolean value. The first
 element corresponds to the text display for false, the second element for
 true. Defaults to 'array('No', 'Yes')'.

<dateFormat>				*CFormatter::dateFormat*
 (string) the format string to be used to format a date using PHP date()
 function. Defaults to 'Y/m/d'.

<datetimeFormat>			*CFormatter::datetimeFormat*
 (string) the format string to be used to format a date and time using PHP
 date() function. Defaults to 'Y/m/d h:i:s A'.

<htmlPurifier>				*CFormatter::htmlPurifier*
 (CHtmlPurifier) the HTML purifier instance

<numberFormat>				*CFormatter::numberFormat*
 (array) the format used to format a number with PHP number_format() function.
 Three elements may be specified: "decimals", "decimalSeparator" and
 "thousandSeparator". They correspond to the number of digits after the
 decimal point, the character displayed as the decimal point, and the
 thousands separator character.

<timeFormat>				*CFormatter::timeFormat*
 (string) the format string to be used to format a time using PHP date()
 function. Defaults to 'h:i:s A'.



METHOD DETAILS
------------------------------------------------------------------------------

*CFormatter::__call*						 public
>
 __call($name, $parameters)
<
(mixed) the method return value

 Calls the format method when its shortcut is invoked. This is a PHP magic
 method that we override to implement the shortcut format methods.
    [name] (string) the method name
    [parameters] (array) method parameters


*CFormatter::format*						 public
>
 format($value, $type)
<
(string) the formatted data

 Formats a value based on the given type.
    [value] (mixed) the value to be formatted
    [type] (string) the data type. This must correspond to a format method
    available in CFormatter. For example, we can use 'text' here because there
    is method named |CFormatter::formatText|.


*CFormatter::formatBoolean*					 public
>
 formatBoolean($value)
<
(string) the formatted result

 Formats the value as a boolean.
    [value] (mixed) the value to be formatted


*CFormatter::formatDate*					 public
>
 formatDate($value)
<
(string) the formatted result

 Formats the value as a date.
    [value] (mixed) the value to be formatted


*CFormatter::formatDatetime*					 public
>
 formatDatetime($value)
<
(string) the formatted result

 Formats the value as a date and time.
    [value] (mixed) the value to be formatted


*CFormatter::formatEmail*					 public
>
 formatEmail($value)
<
(string) the formatted result

 Formats the value as a mailto link.
    [value] (mixed) the value to be formatted


*CFormatter::formatHtml*					 public
>
 formatHtml($value)
<
(string) the formatted result

 Formats the value as HTML text without any encoding.
    [value] (mixed) the value to be formatted


*CFormatter::formatImage*					 public
>
 formatImage($value)
<
(string) the formatted result

 Formats the value as an image tag.
    [value] (mixed) the value to be formatted


*CFormatter::formatNtext*					 public
>
 formatNtext($value)
<
(string) the formatted result

 Formats the value as a HTML-encoded plain text and converts newlines with
 HTML br tags.
    [value] (mixed) the value to be formatted


*CFormatter::formatNumber*					 public
>
 formatNumber($value)
<
(string) the formatted result

 Formats the value as a number using PHP number_format() function.
    [value] (mixed) the value to be formatted


*CFormatter::formatRaw* 					 public
>
 formatRaw($value)
<
(string) the formatted result

 Formats the value as is without any formatting. This method simply returns
 back the parameter without any format.
    [value] (mixed) the value to be formatted


*CFormatter::formatText*					 public
>
 formatText($value)
<
(string) the formatted result

 Formats the value as a HTML-encoded plain text.
    [value] (mixed) the value to be formatted


*CFormatter::formatTime*					 public
>
 formatTime($value)
<
(string) the formatted result

 Formats the value as a time.
    [value] (mixed) the value to be formatted


*CFormatter::formatUrl* 					 public
>
 formatUrl($value)
<
(string) the formatted result

 Formats the value as a hyperlink.
    [value] (mixed) the value to be formatted


*CFormatter::getHtmlPurifier*					 public
>
 getHtmlPurifier()
<
(CHtmlPurifier) the HTML purifier instance




 vim:tw=78:ts=8:ft=help:norl:

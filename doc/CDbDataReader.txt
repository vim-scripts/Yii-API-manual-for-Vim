
*CDbDataReader*   >> |CComponent|
===============

 CDbDataReader represents a forward-only stream of rows from a query result
 set.

 To read the current row of data, call |CDbDataReader::read|. The method
 |CDbDataReader::readAll| returns all the rows in a single array.

 One can also retrieve the rows of data in CDbDataReader by using foreach:
>
 foreach($reader as $row)
     // $row represents a row of data
<
 Since CDbDataReader is a forward-only stream, you can only traverse it once.

 It is possible to use a specific mode of data fetching by setting
 |CDbDataReader::setFetchMode|. See
 'http://www.php.net/manual/en/function.PDOStatement-setFetchMode.php' for
 more details.


PROPERTY DETAILS
------------------------------------------------------------------------------

<columnCount>				*CDbDataReader::columnCount*
 (integer) Returns the number of columns in the result set. Note, even there's
 no row in the reader, this still gives correct column number.

<isClosed>				*CDbDataReader::isClosed*
 (boolean) whether the reader is closed or not.

<rowCount>				*CDbDataReader::rowCount*
 (integer) Returns the number of rows in the result set. Note, most DBMS may
 not give a meaningful count. In this case, use "SELECT COUNT(*) FROM
 tableName" to obtain the number of rows.



METHOD DETAILS
------------------------------------------------------------------------------

*CDbDataReader::__construct*					 public
>
 __construct($command)
<
(void)

 Constructor.
    [command] (CDbCommand) the command generating the query result


*CDbDataReader::bindColumn*					 public
>
 bindColumn($column, $value, $dataType=)
<
(void)

 Binds a column to a PHP variable. When rows of data are being fetched, the
 corresponding column value will be set in the variable. Note, the fetch mode
 must include PDO::FETCH_BOUND.
    [column] (mixed) Number of the column (1-indexed) or name of the column in
    the result set. If using the column name, be aware that the name should
    match the case of the column, as returned by the driver.
    [value] (mixed) Name of the PHP variable to which the column will be
    bound.
    [dataType] (integer) Data type of the parameter


*CDbDataReader::close*						 public
>
 close()
<
(void)

 Closes the reader. This frees up the resources allocated for executing this
 SQL statement. Read attemps after this method call are unpredictable.


*CDbDataReader::count*						 public
>
 count()
<
(integer) number of rows contained in the result.

 Returns the number of rows in the result set. This method is required by the
 Countable interface. Note, most DBMS may not give a meaningful count. In this
 case, use "SELECT COUNT(*) FROM tableName" to obtain the number of rows.


*CDbDataReader::current*					 public
>
 current()
<
(mixed) the current row.

 Returns the current row. This method is required by the interface Iterator.


*CDbDataReader::getColumnCount* 				 public
>
 getColumnCount()
<
(integer) the number of columns in the result set.

 Returns the number of columns in the result set. Note, even there's no row in
 the reader, this still gives correct column number.


*CDbDataReader::getIsClosed*					 public
>
 getIsClosed()
<
(boolean) whether the reader is closed or not.

 whether the reader is closed or not.


*CDbDataReader::getRowCount*					 public
>
 getRowCount()
<
(integer) number of rows contained in the result.

 Returns the number of rows in the result set. Note, most DBMS may not give a
 meaningful count. In this case, use "SELECT COUNT(*) FROM tableName" to
 obtain the number of rows.


*CDbDataReader::key*						 public
>
 key()
<
(integer) the index of the current row.

 Returns the index of the current row. This method is required by the
 interface Iterator.


*CDbDataReader::next*						 public
>
 next()
<
(void)

 Moves the internal pointer to the next row. This method is required by the
 interface Iterator.


*CDbDataReader::nextResult*					 public
>
 nextResult()
<
(boolean) Returns true on success or false on failure.

 Advances the reader to the next result when reading the results of a batch of
 statements. This method is only useful when there are multiple result sets
 returned by the query. Not all DBMS support this feature.


*CDbDataReader::read*						 public
>
 read()
<
(array|false) the current row, false if no more row available

 Advances the reader to the next row in a result set.


*CDbDataReader::readAll*					 public
>
 readAll()
<
(array) the result set (each array element represents a row of data). An empty
array will be returned if the result contains no row.

 Reads the whole result set into an array.


*CDbDataReader::readColumn*					 public
>
 readColumn($columnIndex)
<
(mixed|false) the column of the current row, false if no more row available

 Returns a single column from the next row of a result set.
    [columnIndex] (integer) zero-based column index


*CDbDataReader::readObject*					 public
>
 readObject($className, $fields)
<
(mixed|false) the populated object, false if no more row of data available

 Returns an object populated with the next row of data.
    [className] (string) class name of the object to be created and populated
    [fields] (array) Elements of this array are passed to the constructor


*CDbDataReader::rewind* 					 public
>
 rewind()
<
(void)

 Resets the iterator to the initial state. This method is required by the
 interface Iterator.


*CDbDataReader::setFetchMode*					 public
>
 setFetchMode($mode)
<
(void)

 Set the default fetch mode for this statement
    [mode] (mixed) fetch mode


*CDbDataReader::valid*						 public
>
 valid()
<
(boolean) whether there is a row of data at current position.

 Returns whether there is a row of data at current position. This method is
 required by the interface Iterator.



 vim:tw=78:ts=8:ft=help:norl:

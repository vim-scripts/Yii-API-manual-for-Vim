
*CMap*   >> |CComponent|
======

 CMap implements a collection that takes key-value pairs.

 You can access, add or remove an item with a key by using |CMap::itemAt|,
 |CMap::add|, and |CMap::remove|. To get the number of the items in the map,
 use |CMap::getCount|. CMap can also be used like a regular array as follows,
>
 $map[$key]=$value; // add a key-value pair
 unset($map[$key]); // remove the value with the specified key
 if(isset($map[$key])) // if the map contains the key
 foreach($map as $key=>$value) // traverse the items in the map
 $n=count($map);  // returns the number of items in the map
<


PROPERTY DETAILS
------------------------------------------------------------------------------

<count> 				*CMap::count*
 (integer) Returns the number of items in the map.

<iterator>				*CMap::iterator*
 (CMapIterator) Returns an iterator for traversing the items in the list. This
 method is required by the interface IteratorAggregate.

<keys>					*CMap::keys*
 (array) the key list

<readOnly>				*CMap::readOnly*
 (boolean) whether this map is read-only or not. Defaults to false.



METHOD DETAILS
------------------------------------------------------------------------------

*CMap::__construct*						 public
>
 __construct($data=NULL, $readOnly=false)
<
(void)

 Constructor. Initializes the list with an array or an iterable object.
    [data] (array) the intial data. Default is null, meaning no
    initialization.
    [readOnly] (boolean) whether the list is read-only


*CMap::add*							 public
>
 add($key, $value)
<
(void)

 Adds an item into the map. Note, if the specified key already exists, the old
 value will be overwritten.
    [key] (mixed) key
    [value] (mixed) value


*CMap::clear*							 public
>
 clear()
<
(void)

 Removes all items in the map.


*CMap::contains*						 public
>
 contains($key)
<
(boolean) whether the map contains an item with the specified key

    [key] (mixed) the key


*CMap::copyFrom*						 public
>
 copyFrom($data)
<
(void)

 Copies iterable data into the map. Note, existing data in the map will be
 cleared first.
    [data] (mixed) the data to be copied from, must be an array or object
    implementing Traversable


*CMap::count*							 public
>
 count()
<
(integer) number of items in the map.

 Returns the number of items in the map. This method is required by Countable
 interface.


*CMap::getCount*						 public
>
 getCount()
<
(integer) the number of items in the map

 Returns the number of items in the map.


*CMap::getIterator*						 public
>
 getIterator()
<
(CMapIterator) an iterator for traversing the items in the list.

 Returns an iterator for traversing the items in the list. This method is
 required by the interface IteratorAggregate.


*CMap::getKeys* 						 public
>
 getKeys()
<
(array) the key list



*CMap::getReadOnly*						 public
>
 getReadOnly()
<
(boolean) whether this map is read-only or not. Defaults to false.



*CMap::itemAt*							 public
>
 itemAt($key)
<
(mixed) the element at the offset, null if no element is found at the offset

 Returns the item with the specified key. This method is exactly the same as
 |CMap::offsetGet|.
    [key] (mixed) the key


*CMap::mergeArray*						 public
>
 mergeArray($a, $b)
<
(array) the merged array (the original arrays are not changed.)

 Merges two or more arrays into one recursively. If each array has an element
 with the same string key value, the latter will overwrite the former
 (different from array_merge_recursive). Recursive merging will be conducted
 if both arrays have an element of array type and are having the same key. For
 integer-keyed elements, the elements from the latter array will be appended
 to the former array.
    [a] (array) array to be merged to
    [b] (array) array to be merged from. You can specifiy additional arrays
    via third argument, fourth argument etc.


*CMap::mergeWith*						 public
>
 mergeWith($data, $recursive=true)
<
(void)

 Merges iterable data into the map.

 Existing elements in the map will be overwritten if their keys are the same
 as those in the source. If the merge is recursive, the following algorithm is
 performed:
   the map data is saved as $a, and the source data is saved as $b;
   if $a and $b both have an array indxed at the same string key, the
   arrays will be merged using this algorithm;
   any integer-indexed elements in $b will be appended to $a and
   reindexed accordingly;
   any string-indexed elements in $b will overwrite elements in $a
   with the same index;
    [data] (mixed) the data to be merged with, must be an array or object
    implementing Traversable
    [recursive] (boolean) whether the merging should be recursive.


*CMap::offsetExists*						 public
>
 offsetExists($offset)
<
(boolean) 

 Returns whether there is an element at the specified offset. This method is
 required by the interface ArrayAccess.
    [offset] (mixed) the offset to check on


*CMap::offsetGet*						 public
>
 offsetGet($offset)
<
(mixed) the element at the offset, null if no element is found at the offset

 Returns the element at the specified offset. This method is required by the
 interface ArrayAccess.
    [offset] (integer) the offset to retrieve element.


*CMap::offsetSet*						 public
>
 offsetSet($offset, $item)
<
(void)

 Sets the element at the specified offset. This method is required by the
 interface ArrayAccess.
    [offset] (integer) the offset to set element
    [item] (mixed) the element value


*CMap::offsetUnset*						 public
>
 offsetUnset($offset)
<
(void)

 Unsets the element at the specified offset. This method is required by the
 interface ArrayAccess.
    [offset] (mixed) the offset to unset element


*CMap::remove*							 public
>
 remove($key)
<
(mixed) the removed value, null if no such key exists.

 Removes an item from the map by its key.
    [key] (mixed) the key of the item to be removed


*CMap::setReadOnly*						 protected
>
 setReadOnly($value)
<
(void)

    [value] (boolean) whether this list is read-only or not


*CMap::toArray* 						 public
>
 toArray()
<
(array) the list of items in array




 vim:tw=78:ts=8:ft=help:norl:

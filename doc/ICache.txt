
*ICache*  
========

 ICache is the interface that must be implemented by cache components.

 This interface must be implemented by classes supporting caching feature.



METHOD DETAILS
------------------------------------------------------------------------------

*ICache::add*							 public
>
 add($id, $value, $expire=0, $dependency=NULL)
<
(boolean) true if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key into cache if the cache does not contain
 this key. Nothing will be done if the cache already contains the key.
    [id] (string) the key identifying the value to be cached
    [value] (mixed) the value to be cached
    [expire] (integer) the number of seconds in which the cached value will
    expire. 0 means never expire.
    [dependency] (ICacheDependency) dependency of the cached item. If the
    dependency changes, the item is labelled invalid.


*ICache::delete*						 public
>
 delete($id)
<
(boolean) whether the deletion is successful

 Deletes a value with the specified key from cache
    [id] (string) the key of the value to be deleted


*ICache::flush* 						 public
>
 flush()
<
(boolean) whether the flush operation was successful.

 Deletes all values from cache. Be careful of performing this operation if the
 cache is shared by multiple applications.


*ICache::get*							 public
>
 get($id)
<
(mixed) the value stored in cache, false if the value is not in the cache or
expired.

 Retrieves a value from cache with a specified key.
    [id] (string) a key identifying the cached value


*ICache::mget*							 public
>
 mget($ids)
<
(array) list of cached values corresponding to the specified keys. The array
is returned in terms of (key,value) pairs. If a value is not cached or
expired, the corresponding array value will be false.

 Retrieves multiple values from cache with the specified keys. Some caches
 (such as memcache, apc) allow retrieving multiple cached values at one time,
 which may improve the performance since it reduces the communication cost. In
 case a cache doesn't support this feature natively, it will be simulated by
 this method.
    [ids] (array) list of keys identifying the cached values


*ICache::set*							 public
>
 set($id, $value, $expire=0, $dependency=NULL)
<
(boolean) true if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key into cache. If the cache already contains
 such a key, the existing value and expiration time will be replaced with the
 new ones.
    [id] (string) the key identifying the value to be cached
    [value] (mixed) the value to be cached
    [expire] (integer) the number of seconds in which the cached value will
    expire. 0 means never expire.
    [dependency] (ICacheDependency) dependency of the cached item. If the
    dependency changes, the item is labelled invalid.



 vim:tw=78:ts=8:ft=help:norl:

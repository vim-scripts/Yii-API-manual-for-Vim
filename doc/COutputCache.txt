
*COutputCache*   >> |CFilterWidget| >> |CWidget| >> |CBaseController| >> |CComponent|
==============

 COutputCache enables caching the output generated by an action or a view
 fragment.

 If the output to be displayed is found valid in cache, the cached version
 will be displayed instead, which saves the time for generating the original
 output.

 Since COutputCache extends from |CFilterWidget|, it can be used as either a
 filter (for action caching) or a widget (for fragment caching). For the
 latter, the shortcuts |CBaseController::beginCache| and
 |CBaseController::endCache| are often used instead, like the following in a
 view file:
>
 if($this->beginCache('cacheName',array('property1'=>'value1',...))
 {
     // ... display the content to be cached here
    $this->endCache();
 }
<
 COutputCache must work with a cache application component specified via
 |COutputCache::cacheID|. If the cache application component is not available,
 COutputCache will be disabled.

 The validity of the cached content is determined based on two factors: the
 |COutputCache::duration| and the cache |COutputCache::dependency|. The former
 specifies the number of seconds that the data can remain valid in cache
 (defaults to 60s), while the latter specifies conditions that the cached data
 depends on. If a dependency changes, (e.g. relevant data in DB are updated),
 the cached data will be invalidated. For more details about cache dependency,
 see |CCacheDependency|.

 Sometimes, it is necessary to turn off output caching only for certain
 request types. For example, we only want to cache a form when it is initially
 requested; any subsequent display of the form should not be cached because it
 contains user input. We can set |COutputCache::requestTypes| to be
 'array('GET')' to accomplish this task.

 The content fetched from cache may be variated with respect to some
 parameters. COutputCache supports four kinds of variations:
   |COutputCache::varyByRoute|: this specifies whether the cached
   content   should be varied with the requested route (controller
   and action)
   |COutputCache::varyByParam|: this specifies a list of GET
   parameter names   and uses the corresponding values to determine
   the version of the cached content.
   |COutputCache::varyBySession|: this specifies whether the cached
   content   should be varied with the user session.
   |COutputCache::varyByExpression|: this specifies whether the
   cached content   should be varied with the result of the specified
   PHP expression.For more advanced variation, override
 |COutputCache::getBaseCacheKey| method.


PROPERTY DETAILS
------------------------------------------------------------------------------

<baseCacheKey>				*COutputCache::baseCacheKey*
 (string) Caclulates the base cache key. The calculated key will be further
 variated in |COutputCache::getCacheKey|. Derived classes may override this
 method if more variations are needed.

<cache> 				*COutputCache::cache*
 (ICache) the cache used for caching the content.

<cacheID>				*COutputCache::cacheID*
 (string) the ID of the cache application component. Defaults to 'cache' (the
 primary cache application component.)

<cacheKey>				*COutputCache::cacheKey*
 (string) Calculates the cache key. The key is calculated based on
 |COutputCache::getBaseCacheKey| and other factors, including
 |COutputCache::varyByRoute|, |COutputCache::varyByParam| and
 |COutputCache::varyBySession|.

<dependency>				*COutputCache::dependency*
 (mixed) the dependency that the cached content depends on. This can be either
 an object implementing |ICacheDependency| interface or an array specifying
 the configuration of the dependency object. For example,
>
 array(
     'class'=>'CDbCacheDependency',
     'sql'=>'SELECT MAX(lastModified) FROM Post',
 )
<
 would make the output cache depends on the last modified time of all posts.
 If any post has its modification time changed, the cached content would be
 invalidated.

<duration>				*COutputCache::duration*
 (integer) number of seconds that the data can remain in cache. Defaults to 60
 seconds. If it is 0, existing cached content would be removed from the cache.
 If it is a negative value, the cache will be disabled (any existing cached
 content will remain in the cache.)

 Note, if cache dependency changes or cache space is limited, the data may be
 purged out of cache earlier.

<isContentCached>			*COutputCache::isContentCached*
 (boolean) whether the content can be found from cache

<requestTypes>				*COutputCache::requestTypes*
 (array) list of request types (e.g. GET, POST) for which the cache should be
 enabled only. Defaults to null, meaning all request types.

<varyByExpression>			*COutputCache::varyByExpression*
 (string) a PHP expression whose result is used in the cache key calculation.
 By setting this property, the output cache will use different cached data for
 each different expression result. The expression can also be a valid PHP
 callback, including class method name (array(ClassName/Object, MethodName)),
 or anonymous function (PHP 5.3.0+). The function/method signature should be
 as follows:
>
 function foo($cache) { ... }
<
 where $cache refers to the output cache component.

<varyByParam>				*COutputCache::varyByParam*
 (array) list of GET parameters that should participate in cache key
 calculation. By setting this property, the output cache will use different
 cached data for each different set of GET parameter values.

<varyByRoute>				*COutputCache::varyByRoute*
 (boolean) whether the content being cached should be differentiated according
 to route. A route consists of the requested controller ID and action ID.
 Defaults to true.

<varyBySession> 			*COutputCache::varyBySession*
 (boolean) whether the content being cached should be differentiated according
 to user sessions. Defaults to false.



METHOD DETAILS
------------------------------------------------------------------------------

*COutputCache::checkContentCache*				 protected
>
 checkContentCache()
<
(boolean) whether the content is found in cache.

 Looks for content in cache.


*COutputCache::filter*						 public
>
 filter($filterChain)
<
(boolean) whether the filtering process should stop after this filter.
Defaults to false.

 Performs filtering before the action is executed. This method is meant to be
 overridden by child classes if begin-filtering is needed.
    [filterChain] (CFilterChain) list of filters being applied to an action


*COutputCache::getBaseCacheKey* 				 protected
>
 getBaseCacheKey()
<
(string) basic cache key without variations

 Caclulates the base cache key. The calculated key will be further variated in
 |COutputCache::getCacheKey|. Derived classes may override this method if more
 variations are needed.


*COutputCache::getCache*					 protected
>
 getCache()
<
(ICache) the cache used for caching the content.



*COutputCache::getCacheKey*					 protected
>
 getCacheKey()
<
(string) cache key

 Calculates the cache key. The key is calculated based on
 |COutputCache::getBaseCacheKey| and other factors, including
 |COutputCache::varyByRoute|, |COutputCache::varyByParam| and
 |COutputCache::varyBySession|.


*COutputCache::getIsContentCached*				 public
>
 getIsContentCached()
<
(boolean) whether the content can be found from cache



*COutputCache::init*						 public
>
 init()
<
(void)

 Marks the start of content to be cached. Content displayed after this method
 call and before |COutputCache::endCache| will be captured and saved in cache.
 This method does nothing if valid content is already found in cache.


*COutputCache::recordAction*					 public
>
 recordAction($context, $method, $params)
<
(void)

 Records a method call when this output cache is in effect. When the content
 is served from the output cache, the recorded method will be re-invoked.
    [context] (string) a property name of the controller. The property should
    refer to an object whose method is being recorded. If empty it means the
    controller itself.
    [method] (string) the method name
    [params] (array) parameters passed to the method


*COutputCache::replayActions*					 protected
>
 replayActions()
<
(void)

 Replays the recorded method calls.


*COutputCache::run*						 public
>
 run()
<
(void)

 Marks the end of content to be cached. Content displayed before this method
 call and after |COutputCache::init| will be captured and saved in cache. This
 method does nothing if valid content is already found in cache.



 vim:tw=78:ts=8:ft=help:norl:

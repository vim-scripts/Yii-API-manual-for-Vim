
*CJuiTabs*   >> |CJuiWidget| >> |CWidget| >> |CBaseController| >> |CComponent|
==========

 CJuiTabs displays a tabs widget.

 CJuiTabs encapsulates the 'JUI tabs' plugin.

 To use this widget, you may insert the following code in a view:
>
 $this->widget('zii.widgets.jui.CJuiTabs', array(
     'tabs'=>array(
         'StaticTab 1'=>'Content for tab 1',
         'StaticTab 2'=>array('content'=>'Content for tab 2', 'id'=>'tab2'),
         // panel 3 contains the content rendered by a partial view
         'AjaxTab'=>array('ajax'=>$ajaxUrl),
     ),
     // additional javascript options for the tabs plugin
     'options'=>array(
         'collapsible'=>true,
     ),
 ));
<
 By configuring the |CJuiTabs::options| property, you may specify the options
 that need to be passed to the JUI tabs plugin. Please refer to the 'JUI tabs'
 documentation for possible options (name-value pairs).


PROPERTY DETAILS
------------------------------------------------------------------------------

<contentTemplate>			*CJuiTabs::contentTemplate*
 (string) the template that is used to generated every tab content. The token
 "{content}" in the template will be replaced with the panel content and the
 token "{id}" with the tab ID.

<headerTemplate>			*CJuiTabs::headerTemplate*
 (string) the template that is used to generated every panel title. The token
 "{title}" in the template will be replaced with the panel title and the token
 "{url}" will be replaced with "#TabID" or with the url of the ajax request.

<tabs>					*CJuiTabs::tabs*
 (array) list of tabs (tab title=>tab content). Note that the tab title will
 not be HTML-encoded. The tab content can be either a string or an array. When
 it is an array, it can be in one of the following two formats:
>
 array('id'=>'myTabID', 'content'=>'tab content')
 array('id'=>'myTabID', 'ajax'=>URL)
<
 where the 'id' element is optional. The second format allows the tab content
 to be dynamically fetched from the specified URL via AJAX. The URL can be
 either a string or an array. If an array, it will be normalized into a URL
 using |CHtml::normalizeUrl|.

<tagName>				*CJuiTabs::tagName*
 (string) the name of the container element that contains all panels. Defaults
 to 'div'.



METHOD DETAILS
------------------------------------------------------------------------------

*CJuiTabs::registerCoreScripts* 				 protected
>
 registerCoreScripts()
<
(void)

 Registers the core script files. This method overrides the parent
 implementation by registering the cookie plugin when cookie option is used.


*CJuiTabs::run* 						 public
>
 run()
<
(void)

 Run this widget. This method registers necessary javascript and renders the
 needed HTML code.



 vim:tw=78:ts=8:ft=help:norl:
